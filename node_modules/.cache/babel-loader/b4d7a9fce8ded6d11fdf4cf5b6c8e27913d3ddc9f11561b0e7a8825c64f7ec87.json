{"ast":null,"code":"/*!\n * Connect - errorHandler\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar utils = require('../utils'),\n  url = require('url'),\n  fs = require('fs');\n\n/**\n * Flexible error handler, providing (_optional_) stack traces\n * and error message responses for requests accepting text, html,\n * or json.\n *\n * Options:\n *\n *   - `showStack`, `stack` respond with both the error message and stack trace. Defaults to `false`\n *   - `showMessage`, `message`, respond with the exception message only. Defaults to `false`\n *   - `dumpExceptions`, `dump`, dump exceptions to stderr (without terminating the process). Defaults to `false`\n *\n * Text:\n *\n *   By default, and when _text/plain_ is accepted a simple stack trace\n *   or error message will be returned.\n *\n * JSON:\n *\n *   When _application/json_ is accepted, connect will respond with\n *   an object in the form of `{ \"error\": error }`. \n *\n * HTML:\n *\n *   When accepted connect will output a nice html stack trace.\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\n\nexports = module.exports = function errorHandler(options) {\n  options = options || {};\n\n  // defaults\n  var showStack = options.showStack || options.stack,\n    showMessage = options.showMessage || options.message,\n    dumpExceptions = options.dumpExceptions || options.dump,\n    formatUrl = options.formatUrl;\n  return function errorHandler(err, req, res, next) {\n    res.statusCode = 500;\n    if (dumpExceptions) console.error(err.stack);\n    if (showStack) {\n      var accept = req.headers.accept || '';\n      // html\n      if (~accept.indexOf('html')) {\n        fs.readFile(__dirname + '/../public/style.css', 'utf8', function (e, style) {\n          fs.readFile(__dirname + '/../public/error.html', 'utf8', function (e, html) {\n            var stack = (err.stack || '').split('\\n').slice(1).map(function (v) {\n              return '<li>' + v + '</li>';\n            }).join('');\n            html = html.replace('{style}', style).replace('{stack}', stack).replace('{title}', exports.title).replace(/\\{error\\}/g, utils.escape(err.toString()));\n            res.setHeader('Content-Type', 'text/html');\n            res.end(html);\n          });\n        });\n        // json\n      } else if (~accept.indexOf('json')) {\n        var json = JSON.stringify({\n          error: err\n        });\n        res.setHeader('Content-Type', 'application/json');\n        res.end(json);\n        // plain text\n      } else {\n        res.writeHead(500, {\n          'Content-Type': 'text/plain'\n        });\n        res.end(err.stack);\n      }\n    } else {\n      var body = showMessage ? err.toString() : 'Internal Server Error';\n      res.setHeader('Content-Type', 'text/plain');\n      res.end(body);\n    }\n  };\n};\n\n/**\n * Template title.\n */\n\nexports.title = 'Connect';","map":{"version":3,"names":["utils","require","url","fs","exports","module","errorHandler","options","showStack","stack","showMessage","message","dumpExceptions","dump","formatUrl","err","req","res","next","statusCode","console","error","accept","headers","indexOf","readFile","__dirname","e","style","html","split","slice","map","v","join","replace","title","escape","toString","setHeader","end","json","JSON","stringify","writeHead","body"],"sources":["/Users/josephlarrivy/software-engineering/springboard/assignments/capstone-2-rework/front-end/node_modules/facebook-sdk/node_modules/connect/lib/middleware/errorHandler.js"],"sourcesContent":["/*!\n * Connect - errorHandler\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar utils = require('../utils')\n  , url = require('url')\n  , fs = require('fs');\n\n/**\n * Flexible error handler, providing (_optional_) stack traces\n * and error message responses for requests accepting text, html,\n * or json.\n *\n * Options:\n *\n *   - `showStack`, `stack` respond with both the error message and stack trace. Defaults to `false`\n *   - `showMessage`, `message`, respond with the exception message only. Defaults to `false`\n *   - `dumpExceptions`, `dump`, dump exceptions to stderr (without terminating the process). Defaults to `false`\n *\n * Text:\n *\n *   By default, and when _text/plain_ is accepted a simple stack trace\n *   or error message will be returned.\n *\n * JSON:\n *\n *   When _application/json_ is accepted, connect will respond with\n *   an object in the form of `{ \"error\": error }`. \n *\n * HTML:\n *\n *   When accepted connect will output a nice html stack trace.\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\n\nexports = module.exports = function errorHandler(options){\n  options = options || {};\n\n  // defaults\n  var showStack = options.showStack || options.stack\n    , showMessage = options.showMessage || options.message\n    , dumpExceptions = options.dumpExceptions || options.dump\n    , formatUrl = options.formatUrl;\n\n  return function errorHandler(err, req, res, next){\n    res.statusCode = 500;\n    if (dumpExceptions) console.error(err.stack);\n    if (showStack) {\n      var accept = req.headers.accept || '';\n      // html\n      if (~accept.indexOf('html')) {\n        fs.readFile(__dirname + '/../public/style.css', 'utf8', function(e, style){\n          fs.readFile(__dirname + '/../public/error.html', 'utf8', function(e, html){\n            var stack = (err.stack || '')\n              .split('\\n').slice(1)\n              .map(function(v){ return '<li>' + v + '</li>'; }).join('');\n              html = html\n                .replace('{style}', style)\n                .replace('{stack}', stack)\n                .replace('{title}', exports.title)\n                .replace(/\\{error\\}/g, utils.escape(err.toString()));\n              res.setHeader('Content-Type', 'text/html');\n              res.end(html);\n          });\n        });\n      // json\n      } else if (~accept.indexOf('json')) {\n        var json = JSON.stringify({ error: err });\n        res.setHeader('Content-Type', 'application/json');\n        res.end(json);\n      // plain text\n      } else {\n        res.writeHead(500, { 'Content-Type': 'text/plain' });\n        res.end(err.stack);\n      }\n    } else {\n      var body = showMessage\n        ? err.toString()\n        : 'Internal Server Error';\n      res.setHeader('Content-Type', 'text/plain');\n      res.end(body);\n    }\n  };\n};\n\n/**\n * Template title.\n */\n\nexports.title = 'Connect';"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}