{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nfunction useFormatDate(dateString) {\n  _s();\n  const [formattedDate, setFormattedDate] = useState('');\n  useEffect(() => {\n    const date = new Date(dateString);\n    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    const month = monthNames[date.getMonth()];\n    const day = date.getDate();\n    const year = date.getFullYear();\n    const formattedTime = `${hours % 12 || 12}:${minutes.toString().padStart(2, '0')} ${ampm}`;\n    const formattedDate = `${month} ${day}, ${year} at ${formattedTime}`;\n    setFormattedDate(formattedDate);\n  }, [dateString]);\n  return formattedDate;\n}\n_s(useFormatDate, \"iaG0t5HRNoqKkfl9hGcEUeGT8nw=\");\nexport default useFormatDate;","map":{"version":3,"names":["useEffect","useState","useFormatDate","dateString","_s","formattedDate","setFormattedDate","date","Date","monthNames","hours","getHours","minutes","getMinutes","ampm","month","getMonth","day","getDate","year","getFullYear","formattedTime","toString","padStart"],"sources":["/Users/josephlarrivy/software-engineering/springboard/assignments/capstone-2-rework/front-end/src/hooks/useFormatDate.js"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nfunction useFormatDate(dateString) {\n  const [formattedDate, setFormattedDate] = useState('');\n\n  useEffect(() => {\n    const date = new Date(dateString);\n    const monthNames = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December',\n    ];\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    const month = monthNames[date.getMonth()];\n    const day = date.getDate();\n    const year = date.getFullYear();\n    const formattedTime = `${hours % 12 || 12}:${minutes.toString().padStart(2, '0')} ${ampm}`;\n    const formattedDate = `${month} ${day}, ${year} at ${formattedTime}`;\n    setFormattedDate(formattedDate);\n  }, [dateString]);\n\n  return formattedDate;\n}\n\nexport default useFormatDate\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,SAASC,aAAaA,CAACC,UAAU,EAAE;EAAAC,EAAA;EACjC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAEtDD,SAAS,CAAC,MAAM;IACd,MAAMO,IAAI,GAAG,IAAIC,IAAI,CAACL,UAAU,CAAC;IACjC,MAAMM,UAAU,GAAG,CACjB,SAAS,EACT,UAAU,EACV,OAAO,EACP,OAAO,EACP,KAAK,EACL,MAAM,EACN,MAAM,EACN,QAAQ,EACR,WAAW,EACX,SAAS,EACT,UAAU,EACV,UAAU,CACX;IACD,MAAMC,KAAK,GAAGH,IAAI,CAACI,QAAQ,EAAE;IAC7B,MAAMC,OAAO,GAAGL,IAAI,CAACM,UAAU,EAAE;IACjC,MAAMC,IAAI,GAAGJ,KAAK,IAAI,EAAE,GAAG,IAAI,GAAG,IAAI;IACtC,MAAMK,KAAK,GAAGN,UAAU,CAACF,IAAI,CAACS,QAAQ,EAAE,CAAC;IACzC,MAAMC,GAAG,GAAGV,IAAI,CAACW,OAAO,EAAE;IAC1B,MAAMC,IAAI,GAAGZ,IAAI,CAACa,WAAW,EAAE;IAC/B,MAAMC,aAAa,GAAI,GAAEX,KAAK,GAAG,EAAE,IAAI,EAAG,IAAGE,OAAO,CAACU,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGT,IAAK,EAAC;IAC1F,MAAMT,aAAa,GAAI,GAAEU,KAAM,IAAGE,GAAI,KAAIE,IAAK,OAAME,aAAc,EAAC;IACpEf,gBAAgB,CAACD,aAAa,CAAC;EACjC,CAAC,EAAE,CAACF,UAAU,CAAC,CAAC;EAEhB,OAAOE,aAAa;AACtB;AAACD,EAAA,CA/BQF,aAAa;AAiCtB,eAAeA,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}