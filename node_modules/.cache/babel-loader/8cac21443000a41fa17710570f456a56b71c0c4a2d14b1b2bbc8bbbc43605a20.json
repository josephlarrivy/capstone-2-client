{"ast":null,"code":"/*!\n * Connect - HTTPServer\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar http = require('http'),\n  parse = require('url').parse,\n  assert = require('assert');\n\n// environment\n\nvar env = process.env.NODE_ENV || 'development';\n\n/**\n * Initialize a new `Server` with the given `middleware`.\n *\n * Examples:\n *\n *     var server = connect.createServer(\n *         connect.favicon()\n *       , connect.logger()\n *       , connect.static(__dirname + '/public')\n *     );\n *\n * @params {Array} middleware \n * @return {Server}\n * @api public\n */\n\nvar Server = exports.Server = function HTTPServer(middleware) {\n  this.stack = [];\n  middleware.forEach(function (fn) {\n    this.use(fn);\n  }, this);\n  http.Server.call(this, this.handle);\n};\n\n/**\n * Inherit from `http.Server.prototype`.\n */\n\nServer.prototype.__proto__ = http.Server.prototype;\n\n/**\n * Utilize the given middleware `handle` to the given `route`,\n * defaulting to _/_. This \"route\" is the mount-point for the\n * middleware, when given a value other than _/_ the middleware\n * is only effective when that segment is present in the request's\n * pathname.\n *\n * For example if we were to mount a function at _/admin_, it would\n * be invoked on _/admin_, and _/admin/settings_, however it would\n * not be invoked for _/_, or _/posts_.\n *\n * This is effectively the same as passing middleware to `connect.createServer()`,\n * however provides a progressive api.\n *\n * Examples:\n *\n *      var server = connect.createServer();\n *      server.use(connect.favicon());\n *      server.use(connect.logger());\n *      server.use(connect.static(__dirname + '/public'));\n *\n * If we wanted to prefix static files with _/public_, we could\n * \"mount\" the `static()` middleware:\n *\n *      server.use('/public', connect.static(__dirname + '/public'));\n *\n * This api is chainable, meaning the following is valid:\n *\n *      connect.createServer()\n *        .use(connect.favicon())\n *        .use(connect.logger())\n *        .use(connect.static(__dirname + '/public'))\n *        .listen(3000);\n *\n * @param {String|Function} route or handle\n * @param {Function} handle\n * @return {Server}\n * @api public\n */\n\nServer.prototype.use = function (route, handle) {\n  this.route = '/';\n\n  // default route to '/'\n  if ('string' != typeof route) {\n    handle = route;\n    route = '/';\n  }\n\n  // multiples\n  if (arguments.length > 2) {\n    return Array.prototype.slice.call(arguments, 1).forEach(function (fn) {\n      this.use(route, fn);\n    }, this);\n  }\n\n  // wrap sub-apps\n  if ('function' == typeof handle.handle) {\n    var server = handle;\n    server.route = route;\n    handle = function (req, res, next) {\n      server.handle(req, res, next);\n    };\n  }\n\n  // wrap vanilla http.Servers\n  if (handle instanceof http.Server) {\n    handle = handle.listeners('request')[0];\n  }\n\n  // normalize route to not trail with slash\n  if ('/' == route[route.length - 1]) {\n    route = route.substr(0, route.length - 1);\n  }\n\n  // add the middleware\n  this.stack.push({\n    route: route,\n    handle: handle\n  });\n\n  // allow chaining\n  return this;\n};\n\n/**\n * Handle server requests, punting them down\n * the middleware stack.\n *\n * @api private\n */\n\nServer.prototype.handle = function (req, res, out) {\n  var writeHead = res.writeHead,\n    stack = this.stack,\n    removed = '',\n    index = 0;\n  function next(err) {\n    req.url = removed + req.url;\n    req.originalUrl = req.originalUrl || req.url;\n    removed = '';\n    var layer = stack[index++];\n\n    // all done\n    if (!layer) {\n      // but wait! we have a parent\n      if (out) return out(err);\n\n      // otherwise send a proper error message to the browser.\n      if (err) {\n        var msg = 'production' == env ? 'Internal Server Error' : err.stack || err.toString();\n\n        // output to stderr in a non-test env\n        if ('test' != env) console.error(err.stack || err.toString());\n        res.statusCode = 500;\n        res.setHeader('Content-Type', 'text/plain');\n        res.end(msg);\n      } else {\n        res.statusCode = 404;\n        res.setHeader('Content-Type', 'text/plain');\n        res.end('Cannot ' + req.method + ' ' + req.url);\n      }\n      return;\n    }\n    try {\n      var pathname = parse(req.url).pathname;\n      if (undefined == pathname) pathname = '/';\n\n      // skip this layer if the route doesn't match.\n      if (0 != pathname.indexOf(layer.route)) return next(err);\n      var nextChar = pathname[layer.route.length];\n      if (nextChar && '/' != nextChar && '.' != nextChar) return next(err);\n\n      // Call the layer handler\n      // Trim off the part of the url that matches the route\n      removed = layer.route;\n      req.url = req.url.substr(removed.length);\n\n      // Ensure leading slash\n      if ('/' != req.url[0]) req.url = '/' + req.url;\n      var arity = layer.handle.length;\n      if (err) {\n        if (arity === 4) {\n          layer.handle(err, req, res, next);\n        } else {\n          next(err);\n        }\n      } else if (arity < 4) {\n        layer.handle(req, res, next);\n      } else {\n        next();\n      }\n    } catch (e) {\n      if (e instanceof assert.AssertionError) {\n        console.error(e.stack + '\\n');\n        next(e);\n      } else {\n        next(e);\n      }\n    }\n  }\n  next();\n};","map":{"version":3,"names":["http","require","parse","assert","env","process","NODE_ENV","Server","exports","HTTPServer","middleware","stack","forEach","fn","use","call","handle","prototype","__proto__","route","arguments","length","Array","slice","server","req","res","next","listeners","substr","push","out","writeHead","removed","index","err","url","originalUrl","layer","msg","toString","console","error","statusCode","setHeader","end","method","pathname","undefined","indexOf","nextChar","arity","e","AssertionError"],"sources":["/Users/josephlarrivy/software-engineering/springboard/assignments/capstone-2-rework/front-end/node_modules/facebook-sdk/node_modules/connect/lib/http.js"],"sourcesContent":["\n/*!\n * Connect - HTTPServer\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar http = require('http')\n  , parse = require('url').parse\n  , assert = require('assert');\n\n// environment\n\nvar env = process.env.NODE_ENV || 'development';\n\n/**\n * Initialize a new `Server` with the given `middleware`.\n *\n * Examples:\n *\n *     var server = connect.createServer(\n *         connect.favicon()\n *       , connect.logger()\n *       , connect.static(__dirname + '/public')\n *     );\n *\n * @params {Array} middleware \n * @return {Server}\n * @api public\n */\n\nvar Server = exports.Server = function HTTPServer(middleware) {\n  this.stack = [];\n  middleware.forEach(function(fn){\n    this.use(fn);\n  }, this);\n  http.Server.call(this, this.handle);\n};\n\n/**\n * Inherit from `http.Server.prototype`.\n */\n\nServer.prototype.__proto__ = http.Server.prototype;\n\n/**\n * Utilize the given middleware `handle` to the given `route`,\n * defaulting to _/_. This \"route\" is the mount-point for the\n * middleware, when given a value other than _/_ the middleware\n * is only effective when that segment is present in the request's\n * pathname.\n *\n * For example if we were to mount a function at _/admin_, it would\n * be invoked on _/admin_, and _/admin/settings_, however it would\n * not be invoked for _/_, or _/posts_.\n *\n * This is effectively the same as passing middleware to `connect.createServer()`,\n * however provides a progressive api.\n *\n * Examples:\n *\n *      var server = connect.createServer();\n *      server.use(connect.favicon());\n *      server.use(connect.logger());\n *      server.use(connect.static(__dirname + '/public'));\n *\n * If we wanted to prefix static files with _/public_, we could\n * \"mount\" the `static()` middleware:\n *\n *      server.use('/public', connect.static(__dirname + '/public'));\n *\n * This api is chainable, meaning the following is valid:\n *\n *      connect.createServer()\n *        .use(connect.favicon())\n *        .use(connect.logger())\n *        .use(connect.static(__dirname + '/public'))\n *        .listen(3000);\n *\n * @param {String|Function} route or handle\n * @param {Function} handle\n * @return {Server}\n * @api public\n */\n\nServer.prototype.use = function(route, handle){\n  this.route = '/';\n\n  // default route to '/'\n  if ('string' != typeof route) {\n    handle = route;\n    route = '/';\n  }\n\n  // multiples\n  if (arguments.length > 2) {\n    return Array.prototype.slice.call(arguments, 1).forEach(function(fn){\n      this.use(route, fn);\n    }, this);\n  }\n\n  // wrap sub-apps\n  if ('function' == typeof handle.handle) {\n    var server = handle;\n    server.route = route;\n    handle = function(req, res, next) {\n      server.handle(req, res, next);\n    };\n  }\n\n  // wrap vanilla http.Servers\n  if (handle instanceof http.Server) {\n    handle = handle.listeners('request')[0];\n  }\n\n  // normalize route to not trail with slash\n  if ('/' == route[route.length - 1]) {\n    route = route.substr(0, route.length - 1);\n  }\n\n  // add the middleware\n  this.stack.push({ route: route, handle: handle });\n\n  // allow chaining\n  return this;\n};\n\n/**\n * Handle server requests, punting them down\n * the middleware stack.\n *\n * @api private\n */\n\nServer.prototype.handle = function(req, res, out) {\n  var writeHead = res.writeHead\n    , stack = this.stack\n    , removed = ''\n    , index = 0;\n\n  function next(err) {\n    req.url = removed + req.url;\n    req.originalUrl = req.originalUrl || req.url;\n    removed = '';\n\n    var layer = stack[index++];\n\n    // all done\n    if (!layer) {\n      // but wait! we have a parent\n      if (out) return out(err);\n\n      // otherwise send a proper error message to the browser.\n      if (err) {\n        var msg = 'production' == env\n          ? 'Internal Server Error'\n          : err.stack || err.toString();\n\n        // output to stderr in a non-test env\n        if ('test' != env) console.error(err.stack || err.toString());\n\n        res.statusCode = 500;\n        res.setHeader('Content-Type', 'text/plain');\n        res.end(msg);\n      } else {\n        res.statusCode = 404;\n        res.setHeader('Content-Type', 'text/plain');\n        res.end('Cannot ' + req.method + ' ' + req.url);\n      }\n      return;\n    }\n\n    try {\n      var pathname = parse(req.url).pathname;\n      if (undefined == pathname) pathname = '/';\n\n      // skip this layer if the route doesn't match.\n      if (0 != pathname.indexOf(layer.route)) return next(err);\n\n      var nextChar = pathname[layer.route.length];\n      if (nextChar && '/' != nextChar && '.' != nextChar) return next(err);\n\n      // Call the layer handler\n      // Trim off the part of the url that matches the route\n      removed = layer.route;\n      req.url = req.url.substr(removed.length);\n\n      // Ensure leading slash\n      if ('/' != req.url[0]) req.url = '/' + req.url;\n\n      var arity = layer.handle.length;\n      if (err) {\n        if (arity === 4) {\n          layer.handle(err, req, res, next);\n        } else {\n          next(err);\n        }\n      } else if (arity < 4) {\n        layer.handle(req, res, next);\n      } else {\n        next();\n      }\n    } catch (e) {\n      if (e instanceof assert.AssertionError) {\n        console.error(e.stack + '\\n');\n        next(e);\n      } else {\n        next(e);\n      }\n    }\n  }\n  next();\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}