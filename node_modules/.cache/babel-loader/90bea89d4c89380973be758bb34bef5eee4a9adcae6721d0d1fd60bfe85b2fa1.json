{"ast":null,"code":"import { weatherApiKey } from '../keys';\nclass weatherAPI {\n  constructor(weatherApiKey) {\n    this.apiKey = weatherApiKey;\n    this.baseURL = \"https://api.openweathermap.org/data/2.5/forecast\";\n  }\n  async getWeather(latitude, longitude) {\n    const url = `${this.baseURL}?lat=${latitude}&lon=${longitude}&appid=${this.apiKey}&units=metric`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`Unable to get weather data: ${response.status}`);\n    }\n    const data = await response.json();\n    return this.formatData(data);\n  }\n  formatData(data) {\n    const formattedData = [];\n    for (let i = 0; i < 5; i++) {\n      const weather = {\n        date: new Date(data.list[i].dt * 1000),\n        temperature: data.list[i].main.temp,\n        description: data.list[i].weather[0].description,\n        icon: data.list[i].weather[0].icon\n      };\n      formattedData.push(weather);\n    }\n    return formattedData;\n  }\n}\nexport default weatherAPI;","map":{"version":3,"names":["weatherApiKey","weatherAPI","constructor","apiKey","baseURL","getWeather","latitude","longitude","url","response","fetch","ok","Error","status","data","json","formatData","formattedData","i","weather","date","Date","list","dt","temperature","main","temp","description","icon","push"],"sources":["/Users/josephlarrivy/software-engineering/springboard/assignments/capstone-2-rework/front-end/src/apis/weatherApi.js"],"sourcesContent":["import { weatherApiKey } from '../keys'\n\nclass weatherAPI {\n  constructor(weatherApiKey) {\n    this.apiKey = weatherApiKey;\n    this.baseURL = \"https://api.openweathermap.org/data/2.5/forecast\";\n  }\n\n  async getWeather(latitude, longitude) {\n    const url = `${this.baseURL}?lat=${latitude}&lon=${longitude}&appid=${this.apiKey}&units=metric`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`Unable to get weather data: ${response.status}`);\n    }\n    const data = await response.json();\n    return this.formatData(data);\n  }\n\n  formatData(data) {\n    const formattedData = [];\n    for (let i = 0; i < 5; i++) {\n      const weather = {\n        date: new Date(data.list[i].dt * 1000),\n        temperature: data.list[i].main.temp,\n        description: data.list[i].weather[0].description,\n        icon: data.list[i].weather[0].icon\n      };\n      formattedData.push(weather);\n    }\n    return formattedData;\n  }\n}\n\nexport default weatherAPI;"],"mappings":"AAAA,SAASA,aAAa,QAAQ,SAAS;AAEvC,MAAMC,UAAU,CAAC;EACfC,WAAWA,CAACF,aAAa,EAAE;IACzB,IAAI,CAACG,MAAM,GAAGH,aAAa;IAC3B,IAAI,CAACI,OAAO,GAAG,kDAAkD;EACnE;EAEA,MAAMC,UAAUA,CAACC,QAAQ,EAAEC,SAAS,EAAE;IACpC,MAAMC,GAAG,GAAI,GAAE,IAAI,CAACJ,OAAQ,QAAOE,QAAS,QAAOC,SAAU,UAAS,IAAI,CAACJ,MAAO,eAAc;IAChG,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;IACjC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAE,+BAA8BH,QAAQ,CAACI,MAAO,EAAC,CAAC;IACnE;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,EAAE;IAClC,OAAO,IAAI,CAACC,UAAU,CAACF,IAAI,CAAC;EAC9B;EAEAE,UAAUA,CAACF,IAAI,EAAE;IACf,MAAMG,aAAa,GAAG,EAAE;IACxB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B,MAAMC,OAAO,GAAG;QACdC,IAAI,EAAE,IAAIC,IAAI,CAACP,IAAI,CAACQ,IAAI,CAACJ,CAAC,CAAC,CAACK,EAAE,GAAG,IAAI,CAAC;QACtCC,WAAW,EAAEV,IAAI,CAACQ,IAAI,CAACJ,CAAC,CAAC,CAACO,IAAI,CAACC,IAAI;QACnCC,WAAW,EAAEb,IAAI,CAACQ,IAAI,CAACJ,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAACQ,WAAW;QAChDC,IAAI,EAAEd,IAAI,CAACQ,IAAI,CAACJ,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAACS;MAChC,CAAC;MACDX,aAAa,CAACY,IAAI,CAACV,OAAO,CAAC;IAC7B;IACA,OAAOF,aAAa;EACtB;AACF;AAEA,eAAehB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}