{"ast":null,"code":"import _regeneratorRuntime from\"/Users/josephlarrivy/software-engineering/springboard/assignments/capstone-2-rework/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/josephlarrivy/software-engineering/springboard/assignments/capstone-2-rework/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/josephlarrivy/software-engineering/springboard/assignments/capstone-2-rework/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from\"react\";import'../css/ParksByStateBanner.css';import StateSelect from\"./StateSelect\";import{useNavigate}from'react-router-dom';import useStateNameConverter from\"../hooks/useStateNameConverter\";import NParksServiceRequest from\"../apis/nationalParksApi\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ParksByStateBanner=function ParksByStateBanner(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),USstate=_useState2[0],setUSstate=_useState2[1];var _useStateNameConverte=useStateNameConverter(),_useStateNameConverte2=_slicedToArray(_useStateNameConverte,2),stateName=_useStateNameConverte2[0],convertStateName=_useStateNameConverte2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),parksList=_useState4[0],setParksList=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),selectedPark=_useState6[0],setSelectedPark=_useState6[1];var navigate=useNavigate();useEffect(function(){convertStateName(USstate);var getParks=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:if(!(USstate===null)){_context.next=3;break;}_context.next=8;break;case 3:_context.next=5;return NParksServiceRequest.getParksByState(USstate);case 5:response=_context.sent;console.log(response);setParksList(response);case 8:case\"end\":return _context.stop();}},_callee);}));return function getParks(){return _ref.apply(this,arguments);};}();getParks();setSelectedPark(null);},[USstate]);var handleParkSelect=function handleParkSelect(event){console.log(event.target.value);setSelectedPark(event.target.value);};var handleGoToPark=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(e){return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:navigate(\"/park/\".concat(selectedPark));case 1:case\"end\":return _context2.stop();}},_callee2);}));return function handleGoToPark(_x){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{id:\"parks-by-state-container\",children:[USstate===null?/*#__PURE__*/_jsx(\"h1\",{children:\"Find a Park\"}):/*#__PURE__*/_jsxs(\"h1\",{children:[\"Parks in \",stateName]}),/*#__PURE__*/_jsx(\"div\",{id:\"state-select\",children:/*#__PURE__*/_jsx(StateSelect,{USstate:USstate,setUSstate:setUSstate})}),parksList&&/*#__PURE__*/_jsxs(\"form\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"park-select\"}),/*#__PURE__*/_jsx(\"select\",{id:\"park-select-dropdown\",name:\"park-select\",onChange:handleParkSelect,children:parksList.map(function(item){return/*#__PURE__*/_jsx(\"option\",{value:item.parkCode// onClick={handleParkSelect}\n,children:item.name},item.parkCode);})})]}),selectedPark===null?/*#__PURE__*/_jsx(\"p\",{}):/*#__PURE__*/_jsx(\"div\",{id:\"search-button\",onClick:function onClick(e){return handleGoToPark(e);},children:/*#__PURE__*/_jsx(\"p\",{children:\"View Park\"})})]});};export default ParksByStateBanner;","map":{"version":3,"names":["React","useState","useEffect","StateSelect","useNavigate","useStateNameConverter","NParksServiceRequest","jsx","_jsx","jsxs","_jsxs","ParksByStateBanner","_useState","_useState2","_slicedToArray","USstate","setUSstate","_useStateNameConverte","_useStateNameConverte2","stateName","convertStateName","_useState3","_useState4","parksList","setParksList","_useState5","_useState6","selectedPark","setSelectedPark","navigate","getParks","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","getParksByState","sent","console","log","stop","apply","arguments","handleParkSelect","event","target","value","handleGoToPark","_ref2","_callee2","e","_callee2$","_context2","concat","_x","id","children","htmlFor","name","onChange","map","item","parkCode","onClick"],"sources":["/Users/josephlarrivy/software-engineering/springboard/assignments/capstone-2-rework/client/src/components/ParksByStateBanner.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport '../css/ParksByStateBanner.css'\nimport StateSelect from \"./StateSelect\";\nimport { useNavigate } from 'react-router-dom';\nimport useStateNameConverter from \"../hooks/useStateNameConverter\";\nimport NParksServiceRequest from \"../apis/nationalParksApi\";\n\n\nconst ParksByStateBanner = () => {\n\n  const [USstate, setUSstate] = useState(null)\n  const [stateName, convertStateName] = useStateNameConverter();\n  const [parksList, setParksList] = useState(null)\n  const [selectedPark, setSelectedPark] = useState(null)\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    convertStateName(USstate)\n    const getParks = async () => {\n      if (USstate === null) {\n        // console.log('null')\n      } else {\n        const response = await NParksServiceRequest.getParksByState(USstate)\n        console.log(response)\n        setParksList(response)\n      }\n    }\n    getParks()\n    setSelectedPark(null)\n  }, [USstate])\n\n\n  const handleParkSelect = (event) => {\n    console.log(event.target.value)\n    setSelectedPark(event.target.value)\n  }\n\n  const handleGoToPark = async (e) => {\n    navigate(`/park/${selectedPark}`)\n  }\n\n  return (\n    <div id='parks-by-state-container'>\n      {USstate === null\n        ? <h1>Find a Park</h1>\n        : <h1>Parks in {stateName}</h1>\n      }\n\n      <div id=\"state-select\">\n        <StateSelect USstate={USstate} setUSstate={setUSstate} />\n      </div>\n\n      {parksList && \n        <form>\n          <label htmlFor=\"park-select\"></label>\n          <select id=\"park-select-dropdown\" name=\"park-select\" onChange={handleParkSelect}>\n            {parksList.map(item => {\n              return (\n                <option\n                  key={item.parkCode}\n                  value={item.parkCode}\n                  // onClick={handleParkSelect}\n                  >{item.name}\n                </option>\n              )\n            })}\n          </select>\n        </form>\n      }\n\n      {selectedPark === null\n        ? <p></p>\n        : <div\n            id=\"search-button\"\n            onClick={(e) => handleGoToPark(e)}\n          ><p>View Park</p>\n          </div>\n      }\n      \n\n\n    </div>\n  )\n}\n\nexport default ParksByStateBanner;"],"mappings":"giBAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,+BAA+B,CACtC,MAAO,CAAAC,WAAW,KAAM,eAAe,CACvC,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,MAAO,CAAAC,qBAAqB,KAAM,gCAAgC,CAClE,MAAO,CAAAC,oBAAoB,KAAM,0BAA0B,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAG5D,GAAM,CAAAC,kBAAkB,CAAG,QAArB,CAAAA,kBAAkBA,CAAA,CAAS,CAE/B,IAAAC,SAAA,CAA8BX,QAAQ,CAAC,IAAI,CAAC,CAAAY,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAArCG,OAAO,CAAAF,UAAA,IAAEG,UAAU,CAAAH,UAAA,IAC1B,IAAAI,qBAAA,CAAsCZ,qBAAqB,EAAE,CAAAa,sBAAA,CAAAJ,cAAA,CAAAG,qBAAA,IAAtDE,SAAS,CAAAD,sBAAA,IAAEE,gBAAgB,CAAAF,sBAAA,IAClC,IAAAG,UAAA,CAAkCpB,QAAQ,CAAC,IAAI,CAAC,CAAAqB,UAAA,CAAAR,cAAA,CAAAO,UAAA,IAAzCE,SAAS,CAAAD,UAAA,IAAEE,YAAY,CAAAF,UAAA,IAC9B,IAAAG,UAAA,CAAwCxB,QAAQ,CAAC,IAAI,CAAC,CAAAyB,UAAA,CAAAZ,cAAA,CAAAW,UAAA,IAA/CE,YAAY,CAAAD,UAAA,IAAEE,eAAe,CAAAF,UAAA,IACpC,GAAM,CAAAG,QAAQ,CAAGzB,WAAW,EAAE,CAE9BF,SAAS,CAAC,UAAM,CACdkB,gBAAgB,CAACL,OAAO,CAAC,CACzB,GAAM,CAAAe,QAAQ,6BAAAC,IAAA,CAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAAA,MAAAC,QAAA,QAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA,iBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,cACX1B,OAAO,GAAK,IAAI,GAAAwB,QAAA,CAAAE,IAAA,UAAAF,QAAA,CAAAE,IAAA,gBAAAF,QAAA,CAAAE,IAAA,SAGK,CAAAnC,oBAAoB,CAACoC,eAAe,CAAC3B,OAAO,CAAC,QAA9DqB,QAAQ,CAAAG,QAAA,CAAAI,IAAA,CACdC,OAAO,CAACC,GAAG,CAACT,QAAQ,CAAC,CACrBZ,YAAY,CAACY,QAAQ,CAAC,yBAAAG,QAAA,CAAAO,IAAA,MAAAX,OAAA,GAEzB,kBARK,CAAAL,QAAQA,CAAA,SAAAC,IAAA,CAAAgB,KAAA,MAAAC,SAAA,OAQb,CACDlB,QAAQ,EAAE,CACVF,eAAe,CAAC,IAAI,CAAC,CACvB,CAAC,CAAE,CAACb,OAAO,CAAC,CAAC,CAGb,GAAM,CAAAkC,gBAAgB,CAAG,QAAnB,CAAAA,gBAAgBA,CAAIC,KAAK,CAAK,CAClCN,OAAO,CAACC,GAAG,CAACK,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAC/BxB,eAAe,CAACsB,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CACrC,CAAC,CAED,GAAM,CAAAC,cAAc,6BAAAC,KAAA,CAAAtB,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAqB,SAAOC,CAAC,SAAAvB,mBAAA,GAAAI,IAAA,UAAAoB,UAAAC,SAAA,iBAAAA,SAAA,CAAAlB,IAAA,CAAAkB,SAAA,CAAAjB,IAAA,SAC7BZ,QAAQ,UAAA8B,MAAA,CAAUhC,YAAY,EAAG,yBAAA+B,SAAA,CAAAZ,IAAA,MAAAS,QAAA,GAClC,kBAFK,CAAAF,cAAcA,CAAAO,EAAA,SAAAN,KAAA,CAAAP,KAAA,MAAAC,SAAA,OAEnB,CAED,mBACEtC,KAAA,QAAKmD,EAAE,CAAC,0BAA0B,CAAAC,QAAA,EAC/B/C,OAAO,GAAK,IAAI,cACbP,IAAA,OAAAsD,QAAA,CAAI,aAAW,EAAK,cACpBpD,KAAA,OAAAoD,QAAA,EAAI,WAAS,CAAC3C,SAAS,GAAM,cAGjCX,IAAA,QAAKqD,EAAE,CAAC,cAAc,CAAAC,QAAA,cACpBtD,IAAA,CAACL,WAAW,EAACY,OAAO,CAAEA,OAAQ,CAACC,UAAU,CAAEA,UAAW,EAAG,EACrD,CAELO,SAAS,eACRb,KAAA,SAAAoD,QAAA,eACEtD,IAAA,UAAOuD,OAAO,CAAC,aAAa,EAAS,cACrCvD,IAAA,WAAQqD,EAAE,CAAC,sBAAsB,CAACG,IAAI,CAAC,aAAa,CAACC,QAAQ,CAAEhB,gBAAiB,CAAAa,QAAA,CAC7EvC,SAAS,CAAC2C,GAAG,CAAC,SAAAC,IAAI,CAAI,CACrB,mBACE3D,IAAA,WAEE4C,KAAK,CAAEe,IAAI,CAACC,QACZ;AAAA,CAAAN,QAAA,CACEK,IAAI,CAACH,IAAI,EAHNG,IAAI,CAACC,QAAQ,CAIX,CAEb,CAAC,CAAC,EACK,GACJ,CAGRzC,YAAY,GAAK,IAAI,cAClBnB,IAAA,QAAO,cACPA,IAAA,QACEqD,EAAE,CAAC,eAAe,CAClBQ,OAAO,CAAE,SAAAA,QAACb,CAAC,QAAK,CAAAH,cAAc,CAACG,CAAC,CAAC,EAAC,CAAAM,QAAA,cACnCtD,IAAA,MAAAsD,QAAA,CAAG,WAAS,EAAI,EACX,GAKN,CAEV,CAAC,CAED,cAAe,CAAAnD,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}