{"ast":null,"code":"import axios from \"axios\";\nimport { parks_api_key } from \"../keys\";\nconst PARKS_BASE_URL = \"https://developer.nps.gov/api/v1\";\nclass NParksServiceRequest {\n  static async makeRequest(endpoint) {\n    try {\n      const headers = {\n        \"X-Api-Key\": parks_api_key\n      };\n      const method = 'get';\n      const url = `${PARKS_BASE_URL}${endpoint}`;\n      const resp = await axios({\n        method,\n        url,\n        headers\n      });\n      // console.log(url)\n      return resp;\n    } catch (err) {\n      console.error(err);\n    }\n  }\n  static async getAllParks() {\n    let limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '700';\n    const resp = await this.makeRequest(`/parks?limit=${limit}`);\n    const list = resp.data.data;\n    const parksArray = [];\n    for (let park of list) {\n      parksArray.push(park);\n    }\n    return parksArray;\n  }\n  static async getSingleParkData(code) {\n    const resp = await this.makeRequest(`/parks?parkCode=${code}`);\n    const singleParkData = resp.data.data[0];\n    return singleParkData;\n  }\n  static async getRandomImages() {\n    let limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '700';\n    const resp = await this.makeRequest(`/parks?limit=${limit}`);\n    const list = resp.data.data;\n    const idxArr = [];\n    while (idxArr.length < 50) {\n      const num = Math.floor(Math.random() * 468);\n      if (!idxArr.includes(num)) {\n        idxArr.push(num);\n      }\n    }\n    const parksArray = [];\n    for (let park of list) {\n      parksArray.push(park);\n    }\n    console.log(parksArray);\n    const imagesArray = [];\n    for (let idx of idxArr) {\n      const parkName = parksArray[idx].name;\n      const imageUrl = parksArray[idx].images[0].url;\n      imagesArray.push({\n        parkName,\n        imageUrl\n      });\n    }\n    return imagesArray;\n  }\n}\nexport default NParksServiceRequest;","map":{"version":3,"names":["axios","parks_api_key","PARKS_BASE_URL","NParksServiceRequest","makeRequest","endpoint","headers","method","url","resp","err","console","error","getAllParks","limit","arguments","length","undefined","list","data","parksArray","park","push","getSingleParkData","code","singleParkData","getRandomImages","idxArr","num","Math","floor","random","includes","log","imagesArray","idx","parkName","name","imageUrl","images"],"sources":["/Users/josephlarrivy/software-engineering/springboard/assignments/capstone-2-rework/front-end/src/apis/nationalParksApi.js"],"sourcesContent":["import axios from \"axios\";\n\nimport { parks_api_key } from \"../keys\";\n\nconst PARKS_BASE_URL = \"https://developer.nps.gov/api/v1\";\n\nclass NParksServiceRequest {\n\n  static async makeRequest(endpoint) {\n    try {\n      const headers = { \"X-Api-Key\": parks_api_key };\n      const method = 'get'\n      const url = `${PARKS_BASE_URL}${endpoint}`\n      const resp = await axios({ method, url, headers })\n      // console.log(url)\n      return (resp)\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  static async getAllParks(limit='700') {\n    const resp = await this.makeRequest(`/parks?limit=${limit}`)\n    const list = resp.data.data\n\n    const parksArray = []\n    for (let park of list) {\n      parksArray.push(park)\n    }\n    return parksArray\n  }\n\n  static async getSingleParkData(code) {\n    const resp = await this.makeRequest(`/parks?parkCode=${code}`)\n    const singleParkData = (resp.data.data[0])\n    return singleParkData\n  }\n\n  static async getRandomImages(limit = '700') {\n    const resp = await this.makeRequest(`/parks?limit=${limit}`)\n    const list = resp.data.data\n\n    const idxArr = []\n    while (idxArr.length < 50) {\n      const num = Math.floor(Math.random()*468)\n      if (!idxArr.includes(num)) {\n        idxArr.push(num)\n      }\n    }\n\n    const parksArray = []\n    for (let park of list) {\n      parksArray.push(park)\n    }\n    console.log(parksArray)\n\n    const imagesArray = []\n    for (let idx of idxArr) {\n      const parkName = parksArray[idx].name\n      const imageUrl = parksArray[idx].images[0].url\n      imagesArray.push({parkName, imageUrl})\n    }\n    \n    return imagesArray\n  }\n\n}\n\nexport default NParksServiceRequest;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,aAAa,QAAQ,SAAS;AAEvC,MAAMC,cAAc,GAAG,kCAAkC;AAEzD,MAAMC,oBAAoB,CAAC;EAEzB,aAAaC,WAAWA,CAACC,QAAQ,EAAE;IACjC,IAAI;MACF,MAAMC,OAAO,GAAG;QAAE,WAAW,EAAEL;MAAc,CAAC;MAC9C,MAAMM,MAAM,GAAG,KAAK;MACpB,MAAMC,GAAG,GAAI,GAAEN,cAAe,GAAEG,QAAS,EAAC;MAC1C,MAAMI,IAAI,GAAG,MAAMT,KAAK,CAAC;QAAEO,MAAM;QAAEC,GAAG;QAAEF;MAAQ,CAAC,CAAC;MAClD;MACA,OAAQG,IAAI;IACd,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IACpB;EACF;EAEA,aAAaG,WAAWA,CAAA,EAAc;IAAA,IAAbC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAC,KAAK;IAClC,MAAMN,IAAI,GAAG,MAAM,IAAI,CAACL,WAAW,CAAE,gBAAeU,KAAM,EAAC,CAAC;IAC5D,MAAMI,IAAI,GAAGT,IAAI,CAACU,IAAI,CAACA,IAAI;IAE3B,MAAMC,UAAU,GAAG,EAAE;IACrB,KAAK,IAAIC,IAAI,IAAIH,IAAI,EAAE;MACrBE,UAAU,CAACE,IAAI,CAACD,IAAI,CAAC;IACvB;IACA,OAAOD,UAAU;EACnB;EAEA,aAAaG,iBAAiBA,CAACC,IAAI,EAAE;IACnC,MAAMf,IAAI,GAAG,MAAM,IAAI,CAACL,WAAW,CAAE,mBAAkBoB,IAAK,EAAC,CAAC;IAC9D,MAAMC,cAAc,GAAIhB,IAAI,CAACU,IAAI,CAACA,IAAI,CAAC,CAAC,CAAE;IAC1C,OAAOM,cAAc;EACvB;EAEA,aAAaC,eAAeA,CAAA,EAAgB;IAAA,IAAfZ,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IACxC,MAAMN,IAAI,GAAG,MAAM,IAAI,CAACL,WAAW,CAAE,gBAAeU,KAAM,EAAC,CAAC;IAC5D,MAAMI,IAAI,GAAGT,IAAI,CAACU,IAAI,CAACA,IAAI;IAE3B,MAAMQ,MAAM,GAAG,EAAE;IACjB,OAAOA,MAAM,CAACX,MAAM,GAAG,EAAE,EAAE;MACzB,MAAMY,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAC,GAAG,CAAC;MACzC,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAACJ,GAAG,CAAC,EAAE;QACzBD,MAAM,CAACL,IAAI,CAACM,GAAG,CAAC;MAClB;IACF;IAEA,MAAMR,UAAU,GAAG,EAAE;IACrB,KAAK,IAAIC,IAAI,IAAIH,IAAI,EAAE;MACrBE,UAAU,CAACE,IAAI,CAACD,IAAI,CAAC;IACvB;IACAV,OAAO,CAACsB,GAAG,CAACb,UAAU,CAAC;IAEvB,MAAMc,WAAW,GAAG,EAAE;IACtB,KAAK,IAAIC,GAAG,IAAIR,MAAM,EAAE;MACtB,MAAMS,QAAQ,GAAGhB,UAAU,CAACe,GAAG,CAAC,CAACE,IAAI;MACrC,MAAMC,QAAQ,GAAGlB,UAAU,CAACe,GAAG,CAAC,CAACI,MAAM,CAAC,CAAC,CAAC,CAAC/B,GAAG;MAC9C0B,WAAW,CAACZ,IAAI,CAAC;QAACc,QAAQ;QAAEE;MAAQ,CAAC,CAAC;IACxC;IAEA,OAAOJ,WAAW;EACpB;AAEF;AAEA,eAAe/B,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}