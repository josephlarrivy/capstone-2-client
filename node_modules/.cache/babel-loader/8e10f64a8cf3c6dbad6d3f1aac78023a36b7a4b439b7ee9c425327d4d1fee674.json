{"ast":null,"code":"/*!\n * Connect - basicAuth\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar utils = require('../utils'),\n  unauthorized = utils.unauthorized,\n  badRequest = utils.badRequest;\n\n/**\n * Enfore basic authentication by providing a `callback(user, pass)`,\n * which must return `true` in order to gain access. Alternatively an async\n * method is provided as well, invoking `callback(user, pass, callback)`. Populates\n * `req.remoteUser`. The final alternative is simply passing username / password\n * strings.\n *\n * Examples:\n *\n *     connect(connect.basicAuth('username', 'password'));\n *\n *     connect(\n *       connect.basicAuth(function(user, pass){\n *         return 'tj' == user & 'wahoo' == pass;\n *       })\n *     );\n *\n *     connect(\n *       connect.basicAuth(function(user, pass, fn){\n *         User.authenticate({ user: user, pass: pass }, fn);\n *       })\n *     );\n *\n * @param {Function|String} callback or username\n * @param {String} realm\n * @api public\n */\n\nmodule.exports = function basicAuth(callback, realm) {\n  var username, password;\n\n  // user / pass strings\n  if ('string' == typeof callback) {\n    username = callback;\n    password = realm;\n    if ('string' != typeof password) throw new Error('password argument required');\n    realm = arguments[2];\n    callback = function (user, pass) {\n      return user == username && pass == password;\n    };\n  }\n  realm = realm || 'Authorization Required';\n  return function (req, res, next) {\n    var authorization = req.headers.authorization;\n    if (req.remoteUser) return next();\n    if (!authorization) return unauthorized(res, realm);\n    var parts = authorization.split(' '),\n      scheme = parts[0],\n      credentials = new Buffer(parts[1], 'base64').toString().split(':');\n    if ('Basic' != scheme) return badRequest(res);\n\n    // async\n    if (callback.length >= 3) {\n      var pause = utils.pause(req);\n      callback(credentials[0], credentials[1], function (err, user) {\n        if (err || !user) return unauthorized(res, realm);\n        req.remoteUser = user;\n        next();\n        pause.resume();\n      });\n      // sync\n    } else {\n      if (callback(credentials[0], credentials[1])) {\n        req.remoteUser = credentials[0];\n        next();\n      } else {\n        unauthorized(res, realm);\n      }\n    }\n  };\n};","map":{"version":3,"names":["utils","require","unauthorized","badRequest","module","exports","basicAuth","callback","realm","username","password","Error","arguments","user","pass","req","res","next","authorization","headers","remoteUser","parts","split","scheme","credentials","Buffer","toString","length","pause","err","resume"],"sources":["/Users/josephlarrivy/software-engineering/springboard/assignments/capstone-2-rework/front-end/node_modules/facebook-sdk/node_modules/connect/lib/middleware/basicAuth.js"],"sourcesContent":["\n/*!\n * Connect - basicAuth\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar utils = require('../utils')\n  , unauthorized = utils.unauthorized\n  , badRequest = utils.badRequest;\n\n/**\n * Enfore basic authentication by providing a `callback(user, pass)`,\n * which must return `true` in order to gain access. Alternatively an async\n * method is provided as well, invoking `callback(user, pass, callback)`. Populates\n * `req.remoteUser`. The final alternative is simply passing username / password\n * strings.\n *\n * Examples:\n *\n *     connect(connect.basicAuth('username', 'password'));\n *\n *     connect(\n *       connect.basicAuth(function(user, pass){\n *         return 'tj' == user & 'wahoo' == pass;\n *       })\n *     );\n *\n *     connect(\n *       connect.basicAuth(function(user, pass, fn){\n *         User.authenticate({ user: user, pass: pass }, fn);\n *       })\n *     );\n *\n * @param {Function|String} callback or username\n * @param {String} realm\n * @api public\n */\n\nmodule.exports = function basicAuth(callback, realm) {\n  var username, password;\n\n  // user / pass strings\n  if ('string' == typeof callback) {\n    username = callback;\n    password = realm;\n    if ('string' != typeof password) throw new Error('password argument required');\n    realm = arguments[2];\n    callback = function(user, pass){\n      return user == username && pass == password;\n    }\n  }\n\n  realm = realm || 'Authorization Required';\n\n  return function(req, res, next) {\n    var authorization = req.headers.authorization;\n\n    if (req.remoteUser) return next();\n    if (!authorization) return unauthorized(res, realm);\n\n    var parts = authorization.split(' ')\n      , scheme = parts[0]\n      , credentials = new Buffer(parts[1], 'base64').toString().split(':');\n\n    if ('Basic' != scheme) return badRequest(res);\n\n    // async\n    if (callback.length >= 3) {\n      var pause = utils.pause(req);\n      callback(credentials[0], credentials[1], function(err, user){\n        if (err || !user)  return unauthorized(res, realm);\n        req.remoteUser = user;\n        next();\n        pause.resume();\n      });\n    // sync\n    } else {\n      if (callback(credentials[0], credentials[1])) {\n        req.remoteUser = credentials[0];\n        next();\n      } else {\n        unauthorized(res, realm);\n      }\n    }\n  }\n};\n\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAU,CAAC;EAC3BC,YAAY,GAAGF,KAAK,CAACE,YAAY;EACjCC,UAAU,GAAGH,KAAK,CAACG,UAAU;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG,SAASC,SAASA,CAACC,QAAQ,EAAEC,KAAK,EAAE;EACnD,IAAIC,QAAQ,EAAEC,QAAQ;;EAEtB;EACA,IAAI,QAAQ,IAAI,OAAOH,QAAQ,EAAE;IAC/BE,QAAQ,GAAGF,QAAQ;IACnBG,QAAQ,GAAGF,KAAK;IAChB,IAAI,QAAQ,IAAI,OAAOE,QAAQ,EAAE,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;IAC9EH,KAAK,GAAGI,SAAS,CAAC,CAAC,CAAC;IACpBL,QAAQ,GAAG,SAAAA,CAASM,IAAI,EAAEC,IAAI,EAAC;MAC7B,OAAOD,IAAI,IAAIJ,QAAQ,IAAIK,IAAI,IAAIJ,QAAQ;IAC7C,CAAC;EACH;EAEAF,KAAK,GAAGA,KAAK,IAAI,wBAAwB;EAEzC,OAAO,UAASO,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAE;IAC9B,IAAIC,aAAa,GAAGH,GAAG,CAACI,OAAO,CAACD,aAAa;IAE7C,IAAIH,GAAG,CAACK,UAAU,EAAE,OAAOH,IAAI,EAAE;IACjC,IAAI,CAACC,aAAa,EAAE,OAAOhB,YAAY,CAACc,GAAG,EAAER,KAAK,CAAC;IAEnD,IAAIa,KAAK,GAAGH,aAAa,CAACI,KAAK,CAAC,GAAG,CAAC;MAChCC,MAAM,GAAGF,KAAK,CAAC,CAAC,CAAC;MACjBG,WAAW,GAAG,IAAIC,MAAM,CAACJ,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAACK,QAAQ,EAAE,CAACJ,KAAK,CAAC,GAAG,CAAC;IAEtE,IAAI,OAAO,IAAIC,MAAM,EAAE,OAAOpB,UAAU,CAACa,GAAG,CAAC;;IAE7C;IACA,IAAIT,QAAQ,CAACoB,MAAM,IAAI,CAAC,EAAE;MACxB,IAAIC,KAAK,GAAG5B,KAAK,CAAC4B,KAAK,CAACb,GAAG,CAAC;MAC5BR,QAAQ,CAACiB,WAAW,CAAC,CAAC,CAAC,EAAEA,WAAW,CAAC,CAAC,CAAC,EAAE,UAASK,GAAG,EAAEhB,IAAI,EAAC;QAC1D,IAAIgB,GAAG,IAAI,CAAChB,IAAI,EAAG,OAAOX,YAAY,CAACc,GAAG,EAAER,KAAK,CAAC;QAClDO,GAAG,CAACK,UAAU,GAAGP,IAAI;QACrBI,IAAI,EAAE;QACNW,KAAK,CAACE,MAAM,EAAE;MAChB,CAAC,CAAC;MACJ;IACA,CAAC,MAAM;MACL,IAAIvB,QAAQ,CAACiB,WAAW,CAAC,CAAC,CAAC,EAAEA,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;QAC5CT,GAAG,CAACK,UAAU,GAAGI,WAAW,CAAC,CAAC,CAAC;QAC/BP,IAAI,EAAE;MACR,CAAC,MAAM;QACLf,YAAY,CAACc,GAAG,EAAER,KAAK,CAAC;MAC1B;IACF;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}