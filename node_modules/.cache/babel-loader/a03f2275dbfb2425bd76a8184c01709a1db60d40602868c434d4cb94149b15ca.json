{"ast":null,"code":"/**\n * Copyright 2011 Facebook, Inc.\n * Copyright 2011 Christopher Johnson <tenorviol@yahoo.com>\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar crypto = require('crypto'),\n  http = require('http'),\n  https = require('https'),\n  querystring = require('querystring'),\n  URL = require('url'),\n  util = require('util');\n\n/**\n * Thrown when an API call returns an exception.\n */\nvar FacebookApiException = function (result) {\n  this.result = result;\n  this.error = true;\n  this.code = result.error_code ? result.error_code : 0;\n  if (result.error_description) {\n    // OAuth 2.0 Draft 10 style\n    this.message = result.error_description;\n  } else if (result.error && result.error.message) {\n    // OAuth 2.0 Draft 00 style\n    this.message = result.error.message;\n  } else if (result.error_msg) {\n    // Rest server style\n    this.message = result.error_msg;\n  } else {\n    this.message = 'Unknown Error. Check getResult()';\n  }\n};\nFacebookApiException.prototype = {\n  // The result from the API server that represents the exception information.\n  result: null,\n  /**\n   * Return the associated result object returned by the API server.\n   *\n   * @return {Object} the result from the API server\n   */\n  getResult: function () {\n    return this.result;\n  },\n  /**\n   * Returns the associated type for the error. This will default to\n   * 'Exception' when a type is not available.\n   *\n   * @return {String}\n   */\n  getType: function () {\n    if (this.result.error) {\n      error = this.result.error;\n      if (typeof error == 'string') {\n        // OAuth 2.0 Draft 10 style\n        return error;\n      } else if (error.type) {\n        // OAuth 2.0 Draft 00 style\n        return error.type;\n      }\n    }\n    return 'Exception';\n  },\n  /**\n   * To make debugging easier.\n   *\n   * @return {String} the string representation of the error\n   */\n  toString: function () {\n    str = this.getType() + ': ';\n    if (this.code != 0) {\n      str += this.code + ': ';\n    }\n    return str + this.message;\n  }\n};\n\n/**\n * Initialize the Facebook Application, providing access to the Facebook platform API.\n *\n * The configuration:\n * - appId: the application ID\n * - secret: the application secret\n * - request: (optional) http.ServerRequest for reclaiming sessions\n * - response: (optional) http.ServerResponse for writing the cookie to\n * - domain: (optional) domain for the cookie\n * TODO:\n * - fileUpload: (optional) boolean indicating if file uploads are enabled\n *\n * @param {Object} config the application configuration\n */\nvar Facebook = exports.facebook = exports.Facebook = function (config) {\n  var facebook;\n  if (this instanceof Facebook) {\n    // instantiation using the 'new' operator\n    facebook = this;\n  } else {\n    // connect style middleware function\n    // TODO: this should also function as a Facebook object, add prototype\n    facebook = function (req, res, next) {\n      req.facebook = new Facebook(config);\n      req.facebook.request = req;\n      req.facebook.response = res;\n      next();\n    };\n  }\n  for (var i in config) {\n    facebook[i] = config[i];\n  }\n  return facebook;\n};\nFacebook.prototype = {\n  // The Application ID.\n  appId: null,\n  // The Application API Secret.\n  secret: null,\n  // http.ServerRequest for initializing the session\n  request: null,\n  // http.ServerResponse for writing the session cookie\n  response: null,\n  // Base domain for the Cookie.\n  domain: '',\n  // Indicates if the CURL based @ syntax for file uploads is enabled.\n  fileUpload: false,\n  // Milliseconds for connection with Facebook's servers to be established\n  // TODO: connectTimeout: 10000,\n\n  // Milliseconds for transmition of data from Facebook to complete\n  timeout: 60000,\n  // The active user session, if one is available.\n  _session: null,\n  // The data from the signed_request token.\n  _signedRequest: null,\n  // Indicates that we already loaded the session as best as we could.\n  _sessionLoaded: false,\n  // List of query parameters that get automatically dropped when rebuilding the current URL\n  DROP_QUERY_PARAMS: ['session', 'signed_request'],\n  // Map of aliases to Facebook domains\n  DOMAIN_MAP: {\n    api: 'https://api.facebook.com/',\n    api_video: 'https://api-video.facebook.com/',\n    api_read: 'https://api-read.facebook.com/',\n    graph: 'https://graph.facebook.com/',\n    www: 'https://www.facebook.com/'\n  },\n  /**\n   * Get the data from a signed_request token\n   *\n   * @return {Object}\n   */\n  getSignedRequest: function () {\n    if (!this._signedRequest && this.request) {\n      var signed_request = this.request.body && this.request.body.signed_request;\n      signed_request = signed_request || URL.parse(this.request.url, true).query.signed_request;\n      if (signed_request) {\n        this._signedRequest = this._parseSignedRequest(signed_request);\n      }\n    }\n    return this._signedRequest;\n  },\n  /**\n   * Set the Session.\n   *\n   * @param {Object} session the session\n   * @param {boolean} write_cookie indicate if a cookie should be written. ignored if no response object.\n   */\n  setSession: function (session, write_cookie) {\n    write_cookie = write_cookie === undefined ? true : write_cookie;\n    session = this._validateSessionObject(session);\n    this._sessionLoaded = true;\n    this._session = session;\n    if (write_cookie) {\n      this._setCookieFromSession(session);\n    }\n    return this;\n  },\n  /**\n   * Get the session object. This will automatically look for a signed session\n   * sent via the signed_request, Cookie or Query Parameters if needed.\n   *\n   * @return {Object} the session\n   */\n  getSession: function () {\n    if (!this._sessionLoaded) {\n      var session = null;\n      var write_cookie = true;\n\n      // try loading session from signed_request in request\n      signedRequest = this.getSignedRequest();\n      if (signedRequest) {\n        // sig is good, use the signedRequest\n        session = this._createSessionFromSignedRequest(signedRequest);\n      }\n\n      // try loading session from request\n      if (!session && this.request) {\n        session = this.request.body && this.request.body.session;\n        if (!session) {\n          session = URL.parse(this.request.url, true).query.session;\n        }\n        if (session) {\n          session = JSON.parse(session);\n          session = this._validateSessionObject(session);\n        }\n      }\n\n      // try loading session from cookie if necessary\n      if (!session && this.request) {\n        var cookie = this._getSessionCookie();\n        if (cookie) {\n          var cookie = cookie.replace(/^\"*|\"*$/g, '');\n          session = querystring.parse(cookie);\n          session = this._validateSessionObject(session);\n          // write only if we need to delete a invalid session cookie\n          write_cookie = !session;\n        }\n      }\n      this.setSession(session, write_cookie);\n    }\n    return this._session;\n  },\n  _getSessionCookie: function () {\n    if (!this.request.cookies) {\n      return;\n    }\n    var cookieName = this._getSessionCookieName();\n    return this.request.cookies[cookieName];\n  },\n  /**\n   * Get the UID from the session.\n   *\n   * @return {String} the UID if available\n   */\n  getUser: function () {\n    session = this.getSession();\n    return session ? session.uid : null;\n  },\n  /**\n   * Gets a OAuth access token.\n   *\n   * @return {String} the access token\n   */\n  getAccessToken: function () {\n    session = this.getSession();\n    // either user session signed, or app signed\n    if (session) {\n      return session.access_token;\n    } else {\n      return this.appId + '|' + this.secret;\n    }\n  },\n  /**\n   * Get a Login URL for use with redirects. By default, full page redirect is\n   * assumed. If you are using the generated URL with a window.open() call in\n   * JavaScript, you can pass in display=popup as part of the params.\n   *\n   * The parameters (optional):\n   * - next: the url to go to after a successful login\n   * - cancel_url: the url to go to after the user cancels\n   * - req_perms: comma separated list of requested extended perms\n   * - display: can be \"page\" (default, full page) or \"popup\"\n   *\n   * @param {Object} params provide custom parameters\n   * @return {String} the URL for the login flow\n   */\n  getLoginUrl: function (params) {\n    params = params || {};\n    currentUrl = this._getCurrentUrl();\n    var defaults = {\n      api_key: this.appId,\n      cancel_url: currentUrl,\n      display: 'page',\n      fbconnect: 1,\n      next: currentUrl,\n      return_session: 1,\n      session_version: 3,\n      v: '1.0'\n    };\n    for (var i in defaults) {\n      params[i] = params[i] || defaults[i];\n    }\n    return this._getUrl('www', 'login.php', params);\n  },\n  /**\n   * Get a Logout URL suitable for use with redirects.\n   *\n   * The parameters:\n   * - next: the url to go to after a successful logout\n   *\n   * @param {Object} params provide custom parameters\n   * @return {String} the URL for the logout flow\n   */\n  getLogoutUrl: function (params) {\n    params = params || {};\n    var defaults = {\n      next: this._getCurrentUrl(),\n      access_token: this.getAccessToken()\n    };\n    for (var i in defaults) {\n      params[i] = params[i] || defaults[i];\n    }\n    return this._getUrl('www', 'logout.php', params);\n  },\n  /**\n   * Get a login status URL to fetch the status from facebook.\n   *\n   * The parameters:\n   * - ok_session: the URL to go to if a session is found\n   * - no_session: the URL to go to if the user is not connected\n   * - no_user: the URL to go to if the user is not signed into facebook\n   *\n   * @param {Object} params provide custom parameters\n   * @return {String} the URL for the logout flow\n   */\n  getLoginStatusUrl: function (params) {\n    params = params || {};\n    var defaults = {\n      api_key: this.appId,\n      no_session: this._getCurrentUrl(),\n      no_user: this._getCurrentUrl(),\n      ok_session: this._getCurrentUrl(),\n      session_version: 3\n    };\n    for (var i in defaults) {\n      params[i] = params[i] || defaults[i];\n    }\n    return this._getUrl('www', 'extern/login_status.php', params);\n  },\n  /**\n   * Make an API call.\n   */\n  api: function /* polymorphic */\n  () {\n    if (typeof arguments[0] == 'object') {\n      this._restserver.apply(this, arguments);\n    } else {\n      this._graph.apply(this, arguments);\n    }\n  },\n  /**\n   * Invoke the old restserver.php endpoint.\n   *\n   * @param {Object} params method call object\n   * @param {Function( object )} callback to send the decoded response object\n   */\n  _restserver: function (params, callback) {\n    // generic application level parameters\n    params.api_key = this.appId;\n    params.format = 'json-strings';\n    this._oauthRequest(this._getApiUrl(params.method), params, function (result) {\n      result = JSON.parse(result);\n      if (result && result.error_code) {\n        result = new FacebookApiException(result);\n      }\n      callback(result);\n    }, callback);\n  },\n  /**\n   * Invoke the Graph API.\n   *\n   * @param {String} path the path (required)\n   * @param {String} method the http method (default 'GET')\n   * @param {Object} params the query/post data\n   * @param {Function( object )} callback to send the decoded response object\n   */\n  _graph: function (path, method, params, callback) {\n    var self = this;\n    if (typeof method != 'string') {\n      callback = params;\n      params = method || {};\n      method = params.method || 'GET';\n    }\n    if (typeof params == 'function') {\n      callback = params;\n      params = {};\n    }\n    params.method = method;\n    this._oauthRequest(this._getUrl('graph', path), params, function (result) {\n      result = JSON.parse(result);\n      if (result && result.error) {\n        var result = new FacebookApiException(result);\n        switch (result.getType()) {\n          case 'OAuthException': // OAuth 2.0 Draft 00 style\n          case 'invalid_token':\n            // OAuth 2.0 Draft 10 style\n            // TODO: test and check if headers have alread been sent\n            try {\n              self.setSession(null);\n            } catch (err) {\n              console.log(err);\n            }\n        }\n      }\n      callback && callback(result);\n    }, callback);\n  },\n  /**\n   * Make a OAuth Request\n   *\n   * @param {String} path the path (required)\n   * @param {Object} params the query/post data\n   * @param {Function( string )} success to send the raw response string\n   * @param {Function( FacebookApiException )} error to send the error on failure\n   */\n  _oauthRequest: function (url, params, success, error) {\n    if (!params.access_token) {\n      params.access_token = this.getAccessToken();\n    }\n\n    // json encode all params values that are not strings\n    // TODO: untested\n    for (var key in params) {\n      if (typeof params[key] == 'object') {\n        params[key] = JSON.stringify(params[key]);\n      }\n    }\n    this._makeRequest(url, params, success, error);\n  },\n  /**\n   * Makes an HTTP request. This method can be overriden by subclasses if\n   * developers want to do fancier things or use something other than curl to\n   * make the request.\n   *\n   * @param {String} url the URL to make the request to\n   * @param {Object} params the parameters to use for the POST body\n   * @param {Function( string )} success callback to send the raw response data\n   * @param {Function{ FacebookApiException }} error callback to send an error object\n   */\n  _makeRequest: function (url, params, success, error) {\n    var parts = URL.parse(url);\n    var protocol = http;\n    var port = 80;\n    if (parts.protocol == 'https:') {\n      protocol = https;\n      port = 443;\n    }\n    var options = {\n      host: parts.hostname,\n      port: parts.port ? parts.port : port,\n      path: parts.pathname,\n      method: 'POST',\n      agent: false\n    };\n\n    // TODO: header 'Expect: 100-continue'? This was a part of the original curl makeRequest\n\n    var request = protocol.request(options, function (result) {\n      result.setEncoding('utf8');\n      var body = '';\n      result.on('data', function (chunk) {\n        body += chunk;\n      });\n      result.on('end', function () {\n        clearTimeout(timeout);\n        success(body);\n      });\n    });\n\n    // TODO?\n    // if (this.useFileUploadSupport()) {\n    //   opts[CURLOPT_POSTFIELDS] = params;\n    // } else {\n    //   opts[CURLOPT_POSTFIELDS] = http_build_query(params, null, '&');\n    // }\n\n    request.write(querystring.stringify(params));\n    request.end();\n    var timeout = setTimeout(function () {\n      request.abort();\n      var e = new FacebookApiException({\n        error_code: 28 /* CURLE_OPERATION_TIMEDOUT */,\n        error: {\n          message: 'timeout',\n          type: 'CurlException'\n        }\n      });\n      error && error(e);\n    }, this.timeout);\n  },\n  /**\n   * The name of the Cookie that contains the session.\n   *\n   * @return {String} the cookie name\n   */\n  _getSessionCookieName: function () {\n    return 'fbs_' + this.appId;\n  },\n  /**\n   * Set a JS Cookie based on the _passed in_ session. It does not use the\n   * currently stored session -- you need to explicitly pass it in.\n   *\n   * @param {Object} session the session to use for setting the cookie\n   */\n  _setCookieFromSession: function (session) {\n    if (!this.response) {\n      return;\n    }\n    var name = this._getSessionCookieName();\n    var value = 'deleted';\n    var expires = new Date(Date.now() - 3600000);\n    var domain = this.domain;\n    if (session) {\n      value = '\"' + querystring.stringify(session) + '\"';\n      if (session.base_domain) {\n        domain = session.base_domain;\n      }\n      expires = new Date(session.expires * 1000);\n    }\n\n    // prepend dot if a domain is found\n    if (domain) {\n      domain = '.' + domain;\n    }\n\n    // if an existing cookie is not set, we dont need to delete it\n    // TODO: how do we know the cookie does not exist?\n    //if (value == 'deleted' && empty(_COOKIE[cookieName])) {\n    //  return;\n    //}\n\n    // TODO: statusCode check does not work, write proper test for this\n    //if (this.response.statusCode) {\n    //  this._errorLog('Could not set cookie. Headers already sent.');\n    //} else {\n    var cookie = require('connect').utils.serializeCookie(name, value, {\n      domain: domain,\n      path: '/',\n      expires: expires\n    });\n    this.response.setHeader('Set-Cookie', cookie);\n    //}\n  },\n\n  /**\n   * Validates a session_version=3 style session object.\n   *\n   * @param {Object} session the session object\n   * @return {Object} the session object if it validates, null otherwise\n   */\n  _validateSessionObject: function (session) {\n    // make sure some essential fields exist\n    if (session && session.uid && session.access_token && session.sig) {\n      expected_sig = this._generateSignature(session, this.secret);\n      if (session.sig != expected_sig) {\n        this._errorLog('Got invalid session signature in cookie.');\n        session = null;\n      }\n      // TODO: check expiry time? this was never implemented in the original php lib\n    } else {\n      session = null;\n    }\n    return session;\n  },\n  /**\n   * Returns something that looks like our JS session object from the\n   * signed token's data\n   *\n   * TODO: Nuke this once the login flow uses OAuth2\n   *\n   * @param {Object} data the output of getSignedRequest\n   * @return {Object} Something that will work as a session\n   */\n  _createSessionFromSignedRequest: function (data) {\n    if (!data.oauth_token) {\n      return null;\n    }\n    session = {\n      uid: data.user_id,\n      access_token: data.oauth_token,\n      expires: data.expires\n    };\n\n    // put a real sig, so that validateSignature works\n    session.sig = this._generateSignature(session, this.secret);\n    return session;\n  },\n  /**\n   * Parses a signed_request and validates the signature.\n   * Then saves it in this.signed_data\n   *\n   * @param {String} signed_request A signed token\n   * @return {Object} the payload inside it or null if the sig is wrong\n   */\n  _parseSignedRequest: function (signed_request) {\n    var split = signed_request.split('.', 2);\n    if (split.length != 2) {\n      return null;\n    }\n    var encoded_sig = split[0];\n    var payload = split[1];\n\n    // decode the data\n    sig = this._base64UrlDecode(encoded_sig);\n    data = JSON.parse(this._base64UrlDecode(payload));\n    if (data.algorithm.toUpperCase() !== 'HMAC-SHA256') {\n      this._errorLog('Unknown algorithm. Expected HMAC-SHA256');\n      return null;\n    }\n\n    // check sig\n    var hmac = crypto.createHmac('sha256', this.secret);\n    hmac.update(payload);\n    expected_sig = hmac.digest();\n    if (sig !== expected_sig) {\n      this._errorLog('Bad Signed JSON signature!');\n      return null;\n    }\n    return data;\n  },\n  /**\n   * Build the URL for api given parameters.\n   *\n   * @param {String} method the method name.\n   * @return {String} the URL for the given parameters\n   */\n  _getApiUrl: function (method) {\n    const READ_ONLY_CALLS = {\n      'admin.getallocation': 1,\n      'admin.getappproperties': 1,\n      'admin.getbannedusers': 1,\n      'admin.getlivestreamvialink': 1,\n      'admin.getmetrics': 1,\n      'admin.getrestrictioninfo': 1,\n      'application.getpublicinfo': 1,\n      'auth.getapppublickey': 1,\n      'auth.getsession': 1,\n      'auth.getsignedpublicsessiondata': 1,\n      'comments.get': 1,\n      'connect.getunconnectedfriendscount': 1,\n      'dashboard.getactivity': 1,\n      'dashboard.getcount': 1,\n      'dashboard.getglobalnews': 1,\n      'dashboard.getnews': 1,\n      'dashboard.multigetcount': 1,\n      'dashboard.multigetnews': 1,\n      'data.getcookies': 1,\n      'events.get': 1,\n      'events.getmembers': 1,\n      'fbml.getcustomtags': 1,\n      'feed.getappfriendstories': 1,\n      'feed.getregisteredtemplatebundlebyid': 1,\n      'feed.getregisteredtemplatebundles': 1,\n      'fql.multiquery': 1,\n      'fql.query': 1,\n      'friends.arefriends': 1,\n      'friends.get': 1,\n      'friends.getappusers': 1,\n      'friends.getlists': 1,\n      'friends.getmutualfriends': 1,\n      'gifts.get': 1,\n      'groups.get': 1,\n      'groups.getmembers': 1,\n      'intl.gettranslations': 1,\n      'links.get': 1,\n      'notes.get': 1,\n      'notifications.get': 1,\n      'pages.getinfo': 1,\n      'pages.isadmin': 1,\n      'pages.isappadded': 1,\n      'pages.isfan': 1,\n      'permissions.checkavailableapiaccess': 1,\n      'permissions.checkgrantedapiaccess': 1,\n      'photos.get': 1,\n      'photos.getalbums': 1,\n      'photos.gettags': 1,\n      'profile.getinfo': 1,\n      'profile.getinfooptions': 1,\n      'stream.get': 1,\n      'stream.getcomments': 1,\n      'stream.getfilters': 1,\n      'users.getinfo': 1,\n      'users.getloggedinuser': 1,\n      'users.getstandardinfo': 1,\n      'users.hasapppermission': 1,\n      'users.isappuser': 1,\n      'users.isverified': 1,\n      'video.getuploadlimits': 1\n    };\n    var name = 'api';\n    method = method.toLowerCase();\n    if (READ_ONLY_CALLS[method]) {\n      name = 'api_read';\n    } else if (method === 'video.upload') {\n      name = 'api_video';\n    }\n    return this._getUrl(name, 'restserver.php');\n  },\n  /**\n   * Build the URL for given domain alias, path and parameters.\n   *\n   * @param {String} name the name of the domain\n   * @param {String} path optional path (without a leading slash)\n   * @param {Object} params optional query parameters\n   * @return {String} the URL for the given parameters\n   */\n  _getUrl: function (name, path, params) {\n    var url = this.DOMAIN_MAP[name];\n    if (path) {\n      if (path[0] === '/') {\n        path = path.substr(1);\n      }\n      url += path;\n    }\n    if (params) {\n      url += '?' + querystring.stringify(params);\n    }\n    return url;\n  },\n  /**\n   * Returns the Current URL, stripping it of known FB parameters that should\n   * not persist.\n   *\n   * @return {String} the current URL\n   */\n  _getCurrentUrl: function () {\n    if (this.request && this.request.headers.host) {\n      var site = {\n        protocol: this.request.connection.encrypted ? 'https:' : 'http:',\n        host: this.request.headers.host\n      };\n    } else {\n      throw new Error('No request host available');\n    }\n    var url = URL.parse(this.request.url, true);\n\n    // drop known fb params\n    this.DROP_QUERY_PARAMS.forEach(function (key) {\n      delete url.query[key];\n    });\n    var currentUrl = site.protocol + '//' + site.host + url.pathname;\n    if (url.query) {\n      currentUrl += '?' + querystring.stringify(url.query);\n    }\n    return currentUrl;\n  },\n  /**\n   * Generate a signature for the given params and secret.\n   *\n   * @param {Object} params the parameters to sign\n   * @param {String} secret the secret to sign with\n   * @return {String} the generated signature\n   */\n  _generateSignature: function (params, secret) {\n    var md5 = crypto.createHash('md5');\n    Object.keys(params).sort().forEach(function (key) {\n      if (key !== 'sig') {\n        md5.update(key + '=' + params[key]);\n      }\n    });\n    md5.update(secret);\n    return md5.digest('hex');\n  },\n  /**\n   * Prints to the error log if you aren't in command line mode.\n   *\n   * @param {String} msg log message\n   */\n  _errorLog: function (msg) {\n    console.log(msg);\n  },\n  /**\n   * Base64 encoding that doesn't need to be urlencode()ed.\n   * Exactly the same as base64_encode except it uses\n   *   - instead of +\n   *   _ instead of /\n   *\n   * @param {String} input base64UrlEncodeded string\n   * @param {String} decoded\n   */\n  _base64UrlDecode: function (input) {\n    var buffer = new Buffer(input.replace('-', '+').replace('_', '/'), 'base64');\n    return buffer.toString('binary');\n  }\n};","map":{"version":3,"names":["crypto","require","http","https","querystring","URL","util","FacebookApiException","result","error","code","error_code","error_description","message","error_msg","prototype","getResult","getType","type","toString","str","Facebook","exports","facebook","config","req","res","next","request","response","i","appId","secret","domain","fileUpload","timeout","_session","_signedRequest","_sessionLoaded","DROP_QUERY_PARAMS","DOMAIN_MAP","api","api_video","api_read","graph","www","getSignedRequest","signed_request","body","parse","url","query","_parseSignedRequest","setSession","session","write_cookie","undefined","_validateSessionObject","_setCookieFromSession","getSession","signedRequest","_createSessionFromSignedRequest","JSON","cookie","_getSessionCookie","replace","cookies","cookieName","_getSessionCookieName","getUser","uid","getAccessToken","access_token","getLoginUrl","params","currentUrl","_getCurrentUrl","defaults","api_key","cancel_url","display","fbconnect","return_session","session_version","v","_getUrl","getLogoutUrl","getLoginStatusUrl","no_session","no_user","ok_session","arguments","_restserver","apply","_graph","callback","format","_oauthRequest","_getApiUrl","method","path","self","err","console","log","success","key","stringify","_makeRequest","parts","protocol","port","options","host","hostname","pathname","agent","setEncoding","on","chunk","clearTimeout","write","end","setTimeout","abort","e","name","value","expires","Date","now","base_domain","utils","serializeCookie","setHeader","sig","expected_sig","_generateSignature","_errorLog","data","oauth_token","user_id","split","length","encoded_sig","payload","_base64UrlDecode","algorithm","toUpperCase","hmac","createHmac","update","digest","READ_ONLY_CALLS","toLowerCase","substr","headers","site","connection","encrypted","Error","forEach","md5","createHash","Object","keys","sort","msg","input","buffer","Buffer"],"sources":["/Users/josephlarrivy/software-engineering/springboard/assignments/capstone-2-rework/front-end/node_modules/facebook-sdk/lib/facebook.js"],"sourcesContent":["/**\n * Copyright 2011 Facebook, Inc.\n * Copyright 2011 Christopher Johnson <tenorviol@yahoo.com>\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *     http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar crypto = require('crypto'),\n    http = require('http'),\n    https = require('https'),\n    querystring = require('querystring'),\n    URL = require('url'),\n    util = require('util');\n\n/**\n * Thrown when an API call returns an exception.\n */\nvar FacebookApiException = function(result) {\n  this.result = result;\n\n  this.error = true;\n  this.code = result.error_code ? result.error_code : 0;\n\n  if (result.error_description) {\n    // OAuth 2.0 Draft 10 style\n    this.message = result.error_description;\n  } else if (result.error && result.error.message) {\n    // OAuth 2.0 Draft 00 style\n    this.message = result.error.message;\n  } else if (result.error_msg) {\n    // Rest server style\n    this.message = result.error_msg;\n  } else {\n    this.message = 'Unknown Error. Check getResult()';\n  }\n};\n\nFacebookApiException.prototype = {\n  // The result from the API server that represents the exception information.\n  result: null,\n\n  /**\n   * Return the associated result object returned by the API server.\n   *\n   * @return {Object} the result from the API server\n   */\n  getResult: function() {\n    return this.result;\n  },\n\n  /**\n   * Returns the associated type for the error. This will default to\n   * 'Exception' when a type is not available.\n   *\n   * @return {String}\n   */\n  getType: function() {\n    if (this.result.error) {\n      error = this.result.error;\n      if (typeof error == 'string') {\n        // OAuth 2.0 Draft 10 style\n        return error;\n      } else if (error.type) {\n        // OAuth 2.0 Draft 00 style\n        return error.type;\n      }\n    }\n    return 'Exception';\n  },\n\n  /**\n   * To make debugging easier.\n   *\n   * @return {String} the string representation of the error\n   */\n  toString: function() {\n    str = this.getType() + ': ';\n    if (this.code != 0) {\n      str += this.code + ': ';\n    }\n    return str + this.message;\n  }\n};\n\n/**\n * Initialize the Facebook Application, providing access to the Facebook platform API.\n *\n * The configuration:\n * - appId: the application ID\n * - secret: the application secret\n * - request: (optional) http.ServerRequest for reclaiming sessions\n * - response: (optional) http.ServerResponse for writing the cookie to\n * - domain: (optional) domain for the cookie\n * TODO:\n * - fileUpload: (optional) boolean indicating if file uploads are enabled\n *\n * @param {Object} config the application configuration\n */\nvar Facebook = exports.facebook = exports.Facebook = function(config) {\n  var facebook;\n  if (this instanceof Facebook) {\n    // instantiation using the 'new' operator\n    facebook = this;\n  } else {\n    // connect style middleware function\n    // TODO: this should also function as a Facebook object, add prototype\n    facebook = function(req, res, next) {\n      req.facebook = new Facebook(config);\n      req.facebook.request = req;\n      req.facebook.response = res;\n      next();\n    };\n  }\n\n  for (var i in config) {\n    facebook[i] = config[i];\n  }\n  \n  return facebook;\n};\n\nFacebook.prototype = {\n\n  // The Application ID.\n  appId: null,\n\n  // The Application API Secret.\n  secret: null,\n\n  // http.ServerRequest for initializing the session\n  request: null,\n\n  // http.ServerResponse for writing the session cookie\n  response: null,\n\n  // Base domain for the Cookie.\n  domain: '',\n\n  // Indicates if the CURL based @ syntax for file uploads is enabled.\n  fileUpload: false,\n\n  // Milliseconds for connection with Facebook's servers to be established\n  // TODO: connectTimeout: 10000,\n  \n  // Milliseconds for transmition of data from Facebook to complete\n  timeout: 60000,\n\n  // The active user session, if one is available.\n  _session: null,\n\n  // The data from the signed_request token.\n  _signedRequest: null,\n\n  // Indicates that we already loaded the session as best as we could.\n  _sessionLoaded: false,\n\n\n  // List of query parameters that get automatically dropped when rebuilding the current URL\n  DROP_QUERY_PARAMS: [\n    'session',\n    'signed_request'\n  ],\n\n  // Map of aliases to Facebook domains\n  DOMAIN_MAP: {\n    api      : 'https://api.facebook.com/',\n    api_video: 'https://api-video.facebook.com/',\n    api_read : 'https://api-read.facebook.com/',\n    graph    : 'https://graph.facebook.com/',\n    www      : 'https://www.facebook.com/'\n  },\n\n  /**\n   * Get the data from a signed_request token\n   *\n   * @return {Object}\n   */\n  getSignedRequest: function() {\n    if (!this._signedRequest && this.request) {\n      var signed_request = this.request.body && this.request.body.signed_request;\n      signed_request = signed_request || URL.parse(this.request.url, true).query.signed_request;\n      if (signed_request) {\n        this._signedRequest = this._parseSignedRequest(signed_request);\n      }\n    }\n    return this._signedRequest;\n  },\n\n  /**\n   * Set the Session.\n   *\n   * @param {Object} session the session\n   * @param {boolean} write_cookie indicate if a cookie should be written. ignored if no response object.\n   */\n  setSession: function(session, write_cookie) {\n    write_cookie = write_cookie === undefined ? true : write_cookie;\n    session = this._validateSessionObject(session);\n    this._sessionLoaded = true;\n    this._session = session;\n    if (write_cookie) {\n      this._setCookieFromSession(session);\n    }\n    return this;\n  },\n\n  /**\n   * Get the session object. This will automatically look for a signed session\n   * sent via the signed_request, Cookie or Query Parameters if needed.\n   *\n   * @return {Object} the session\n   */\n  getSession: function() {\n    if (!this._sessionLoaded) {\n      var session = null;\n      var write_cookie = true;\n\n      // try loading session from signed_request in request\n      signedRequest = this.getSignedRequest();\n      if (signedRequest) {\n        // sig is good, use the signedRequest\n        session = this._createSessionFromSignedRequest(signedRequest);\n      }\n\n      // try loading session from request\n      if (!session && this.request) {\n        session = this.request.body && this.request.body.session;\n        if (!session) {\n          session = URL.parse(this.request.url, true).query.session;\n        }\n        if (session) {\n          session = JSON.parse(session);\n          session = this._validateSessionObject(session);\n        }\n      }\n\n      // try loading session from cookie if necessary\n      if (!session && this.request) {\n        var cookie = this._getSessionCookie();\n        if (cookie) {\n          var cookie = cookie.replace(/^\"*|\"*$/g, '');\n          session = querystring.parse(cookie);\n          session = this._validateSessionObject(session);\n          // write only if we need to delete a invalid session cookie\n          write_cookie = !session;\n        }\n      }\n\n      this.setSession(session, write_cookie);\n    }\n\n    return this._session;\n  },\n\n  _getSessionCookie: function() {\n    if (!this.request.cookies) {\n      return;\n    }\n    var cookieName = this._getSessionCookieName();\n    return this.request.cookies[cookieName];\n  },\n\n  /**\n   * Get the UID from the session.\n   *\n   * @return {String} the UID if available\n   */\n  getUser: function() {\n    session = this.getSession();\n    return session ? session.uid : null;\n  },\n\n  /**\n   * Gets a OAuth access token.\n   *\n   * @return {String} the access token\n   */\n  getAccessToken: function() {\n    session = this.getSession();\n    // either user session signed, or app signed\n    if (session) {\n      return session.access_token;\n    } else {\n      return this.appId +'|'+ this.secret;\n    }\n  },\n\n  /**\n   * Get a Login URL for use with redirects. By default, full page redirect is\n   * assumed. If you are using the generated URL with a window.open() call in\n   * JavaScript, you can pass in display=popup as part of the params.\n   *\n   * The parameters (optional):\n   * - next: the url to go to after a successful login\n   * - cancel_url: the url to go to after the user cancels\n   * - req_perms: comma separated list of requested extended perms\n   * - display: can be \"page\" (default, full page) or \"popup\"\n   *\n   * @param {Object} params provide custom parameters\n   * @return {String} the URL for the login flow\n   */\n  getLoginUrl: function(params) {\n    params = params || {};\n    currentUrl = this._getCurrentUrl();\n\n    var defaults = {\n      api_key         : this.appId,\n      cancel_url      : currentUrl,\n      display         : 'page',\n      fbconnect       : 1,\n      next            : currentUrl,\n      return_session  : 1,\n      session_version : 3,\n      v               : '1.0'\n    };\n    for (var i in defaults) {\n      params[i] = params[i] || defaults[i];\n    }\n\n    return this._getUrl('www', 'login.php', params);\n  },\n\n  /**\n   * Get a Logout URL suitable for use with redirects.\n   *\n   * The parameters:\n   * - next: the url to go to after a successful logout\n   *\n   * @param {Object} params provide custom parameters\n   * @return {String} the URL for the logout flow\n   */\n  getLogoutUrl: function(params) {\n    params = params || {};\n\n    var defaults = {\n      next         : this._getCurrentUrl(),\n      access_token : this.getAccessToken()\n    };\n    for (var i in defaults) {\n      params[i] = params[i] || defaults[i];\n    }\n\n    return this._getUrl('www', 'logout.php', params);\n  },\n\n  /**\n   * Get a login status URL to fetch the status from facebook.\n   *\n   * The parameters:\n   * - ok_session: the URL to go to if a session is found\n   * - no_session: the URL to go to if the user is not connected\n   * - no_user: the URL to go to if the user is not signed into facebook\n   *\n   * @param {Object} params provide custom parameters\n   * @return {String} the URL for the logout flow\n   */\n  getLoginStatusUrl: function(params) {\n    params = params || {};\n\n    var defaults = {\n      api_key         : this.appId,\n      no_session      : this._getCurrentUrl(),\n      no_user         : this._getCurrentUrl(),\n      ok_session      : this._getCurrentUrl(),\n      session_version : 3\n    };\n    for (var i in defaults) {\n      params[i] = params[i] || defaults[i];\n    }\n\n    return this._getUrl('www', 'extern/login_status.php', params);\n  },\n\n  /**\n   * Make an API call.\n   */\n  api: function(/* polymorphic */) {\n    if (typeof arguments[0] == 'object') {\n      this._restserver.apply(this, arguments);\n    } else {\n      this._graph.apply(this, arguments);\n    }\n  },\n\n  /**\n   * Invoke the old restserver.php endpoint.\n   *\n   * @param {Object} params method call object\n   * @param {Function( object )} callback to send the decoded response object\n   */\n  _restserver: function(params, callback) {\n    // generic application level parameters\n    params.api_key = this.appId;\n    params.format = 'json-strings';\n\n    this._oauthRequest(\n      this._getApiUrl(params.method),\n      params,\n      function(result) {\n        result = JSON.parse(result);\n        if (result && result.error_code) {\n          result = new FacebookApiException(result);\n        }\n        callback(result);\n      },\n      callback\n    );\n  },\n\n  /**\n   * Invoke the Graph API.\n   *\n   * @param {String} path the path (required)\n   * @param {String} method the http method (default 'GET')\n   * @param {Object} params the query/post data\n   * @param {Function( object )} callback to send the decoded response object\n   */\n  _graph: function(path, method, params, callback) {\n    var self = this;\n\n    if (typeof method != 'string') {\n      callback = params;\n      params = method || {};\n      method = params.method || 'GET';\n    }\n    if (typeof params == 'function') {\n      callback = params;\n      params = {};\n    }\n    params.method = method;\n\n    this._oauthRequest(\n      this._getUrl('graph', path),\n      params,\n      function(result) {\n        result = JSON.parse(result);\n        if (result && result.error) {\n          var result = new FacebookApiException(result);\n          switch (result.getType()) {\n            case 'OAuthException': // OAuth 2.0 Draft 00 style\n            case 'invalid_token':  // OAuth 2.0 Draft 10 style\n              // TODO: test and check if headers have alread been sent\n              try {\n                self.setSession(null);\n              } catch (err) {\n                console.log(err);\n              }\n          }\n        }\n        callback && callback(result);\n      },\n      callback\n    );\n  },\n\n  /**\n   * Make a OAuth Request\n   *\n   * @param {String} path the path (required)\n   * @param {Object} params the query/post data\n   * @param {Function( string )} success to send the raw response string\n   * @param {Function( FacebookApiException )} error to send the error on failure\n   */\n  _oauthRequest: function(url, params, success, error) {\n    if (!params.access_token) {\n      params.access_token = this.getAccessToken();\n    }\n\n    // json encode all params values that are not strings\n    // TODO: untested\n    for (var key in params) {\n      if (typeof params[key] == 'object') {\n        params[key] = JSON.stringify(params[key]);\n      }\n    }\n\n    this._makeRequest(url, params, success, error);\n  },\n\n  /**\n   * Makes an HTTP request. This method can be overriden by subclasses if\n   * developers want to do fancier things or use something other than curl to\n   * make the request.\n   *\n   * @param {String} url the URL to make the request to\n   * @param {Object} params the parameters to use for the POST body\n   * @param {Function( string )} success callback to send the raw response data\n   * @param {Function{ FacebookApiException }} error callback to send an error object\n   */\n  _makeRequest: function(url, params, success, error) {\n    var parts = URL.parse(url);\n\n    var protocol = http;\n    var port = 80;\n    if (parts.protocol == 'https:') {\n      protocol = https;\n      port = 443;\n    }\n\n    var options = {\n      host: parts.hostname,\n      port: parts.port ? parts.port : port,\n      path: parts.pathname,\n      method: 'POST',\n      agent: false\n    };\n\n    // TODO: header 'Expect: 100-continue'? This was a part of the original curl makeRequest\n\n    var request = protocol.request(options, function(result) {\n      result.setEncoding('utf8');\n\n      var body = '';\n      result.on('data', function(chunk) {\n        body += chunk;\n      });\n\n      result.on('end', function() {\n        clearTimeout(timeout);\n        success(body);\n      });\n    });\n\n    // TODO?\n    // if (this.useFileUploadSupport()) {\n    //   opts[CURLOPT_POSTFIELDS] = params;\n    // } else {\n    //   opts[CURLOPT_POSTFIELDS] = http_build_query(params, null, '&');\n    // }\n    \n    request.write(querystring.stringify(params));\n    request.end();\n\n    var timeout = setTimeout(function() {\n      request.abort();\n      var e = new FacebookApiException({\n        error_code : 28 /* CURLE_OPERATION_TIMEDOUT */,\n        error      : {\n          message : 'timeout',\n          type    : 'CurlException'\n        }\n      });\n      error && error(e);\n    }, this.timeout);\n  },\n\n  /**\n   * The name of the Cookie that contains the session.\n   *\n   * @return {String} the cookie name\n   */\n  _getSessionCookieName: function() {\n    return 'fbs_' + this.appId;\n  },\n\n  /**\n   * Set a JS Cookie based on the _passed in_ session. It does not use the\n   * currently stored session -- you need to explicitly pass it in.\n   *\n   * @param {Object} session the session to use for setting the cookie\n   */\n  _setCookieFromSession: function(session) {\n    if (!this.response) {\n      return;\n    }\n\n    var name = this._getSessionCookieName();\n    var value = 'deleted';\n    var expires = new Date(Date.now() - 3600000);\n    var domain = this.domain;\n    if (session) {\n      value = '\"' + querystring.stringify(session) + '\"';\n      if (session.base_domain) {\n        domain = session.base_domain;\n      }\n      expires = new Date(session.expires * 1000);\n    }\n    \n    // prepend dot if a domain is found\n    if (domain) {\n      domain = '.' + domain;\n    }\n    \n    // if an existing cookie is not set, we dont need to delete it\n    // TODO: how do we know the cookie does not exist?\n    //if (value == 'deleted' && empty(_COOKIE[cookieName])) {\n    //  return;\n    //}\n    \n    // TODO: statusCode check does not work, write proper test for this\n    //if (this.response.statusCode) {\n    //  this._errorLog('Could not set cookie. Headers already sent.');\n    //} else {\n      var cookie = require('connect').utils.serializeCookie(name, value, {\n        domain: domain,\n        path: '/',\n        expires: expires\n      });\n      this.response.setHeader('Set-Cookie', cookie);\n    //}\n  },\n\n  /**\n   * Validates a session_version=3 style session object.\n   *\n   * @param {Object} session the session object\n   * @return {Object} the session object if it validates, null otherwise\n   */\n  _validateSessionObject: function(session) {\n    // make sure some essential fields exist\n    if (session &&\n        session.uid &&\n        session.access_token &&\n        session.sig) {\n      expected_sig = this._generateSignature(session, this.secret);\n      if (session.sig != expected_sig) {\n        this._errorLog('Got invalid session signature in cookie.');\n        session = null;\n      }\n      // TODO: check expiry time? this was never implemented in the original php lib\n    } else {\n      session = null;\n    }\n    return session;\n  },\n\n  /**\n   * Returns something that looks like our JS session object from the\n   * signed token's data\n   *\n   * TODO: Nuke this once the login flow uses OAuth2\n   *\n   * @param {Object} data the output of getSignedRequest\n   * @return {Object} Something that will work as a session\n   */\n  _createSessionFromSignedRequest: function(data) {\n    if (!data.oauth_token) {\n      return null;\n    }\n\n    session = {\n      uid          : data.user_id,\n      access_token : data.oauth_token,\n      expires      : data.expires\n    };\n\n    // put a real sig, so that validateSignature works\n    session.sig = this._generateSignature(session, this.secret);\n\n    return session;\n  },\n\n  /**\n   * Parses a signed_request and validates the signature.\n   * Then saves it in this.signed_data\n   *\n   * @param {String} signed_request A signed token\n   * @return {Object} the payload inside it or null if the sig is wrong\n   */\n  _parseSignedRequest: function(signed_request) {\n    var split = signed_request.split('.', 2);\n    if (split.length != 2) {\n      return null;\n    }\n    var encoded_sig = split[0];\n    var payload = split[1];\n\n    // decode the data\n    sig = this._base64UrlDecode(encoded_sig);\n    data = JSON.parse(this._base64UrlDecode(payload));\n\n    if (data.algorithm.toUpperCase() !== 'HMAC-SHA256') {\n      this._errorLog('Unknown algorithm. Expected HMAC-SHA256');\n      return null;\n    }\n\n    // check sig\n    var hmac = crypto.createHmac('sha256', this.secret);\n    hmac.update(payload);\n    expected_sig = hmac.digest();\n    if (sig !== expected_sig) {\n      this._errorLog('Bad Signed JSON signature!');\n      return null;\n    }\n\n    return data;\n  },\n\n  /**\n   * Build the URL for api given parameters.\n   *\n   * @param {String} method the method name.\n   * @return {String} the URL for the given parameters\n   */\n  _getApiUrl: function(method) {\n    const READ_ONLY_CALLS = {\n      'admin.getallocation' : 1,\n      'admin.getappproperties' : 1,\n      'admin.getbannedusers' : 1,\n      'admin.getlivestreamvialink' : 1,\n      'admin.getmetrics' : 1,\n      'admin.getrestrictioninfo' : 1,\n      'application.getpublicinfo' : 1,\n      'auth.getapppublickey' : 1,\n      'auth.getsession' : 1,\n      'auth.getsignedpublicsessiondata' : 1,\n      'comments.get' : 1,\n      'connect.getunconnectedfriendscount' : 1,\n      'dashboard.getactivity' : 1,\n      'dashboard.getcount' : 1,\n      'dashboard.getglobalnews' : 1,\n      'dashboard.getnews' : 1,\n      'dashboard.multigetcount' : 1,\n      'dashboard.multigetnews' : 1,\n      'data.getcookies' : 1,\n      'events.get' : 1,\n      'events.getmembers' : 1,\n      'fbml.getcustomtags' : 1,\n      'feed.getappfriendstories' : 1,\n      'feed.getregisteredtemplatebundlebyid' : 1,\n      'feed.getregisteredtemplatebundles' : 1,\n      'fql.multiquery' : 1,\n      'fql.query' : 1,\n      'friends.arefriends' : 1,\n      'friends.get' : 1,\n      'friends.getappusers' : 1,\n      'friends.getlists' : 1,\n      'friends.getmutualfriends' : 1,\n      'gifts.get' : 1,\n      'groups.get' : 1,\n      'groups.getmembers' : 1,\n      'intl.gettranslations' : 1,\n      'links.get' : 1,\n      'notes.get' : 1,\n      'notifications.get' : 1,\n      'pages.getinfo' : 1,\n      'pages.isadmin' : 1,\n      'pages.isappadded' : 1,\n      'pages.isfan' : 1,\n      'permissions.checkavailableapiaccess' : 1,\n      'permissions.checkgrantedapiaccess' : 1,\n      'photos.get' : 1,\n      'photos.getalbums' : 1,\n      'photos.gettags' : 1,\n      'profile.getinfo' : 1,\n      'profile.getinfooptions' : 1,\n      'stream.get' : 1,\n      'stream.getcomments' : 1,\n      'stream.getfilters' : 1,\n      'users.getinfo' : 1,\n      'users.getloggedinuser' : 1,\n      'users.getstandardinfo' : 1,\n      'users.hasapppermission' : 1,\n      'users.isappuser' : 1,\n      'users.isverified' : 1,\n      'video.getuploadlimits' : 1\n    };\n    var name = 'api';\n    method = method.toLowerCase();\n    if (READ_ONLY_CALLS[method]) {\n      name = 'api_read';\n    } else if (method === 'video.upload') {\n      name = 'api_video';\n    }\n    return this._getUrl(name, 'restserver.php');\n  },\n\n  /**\n   * Build the URL for given domain alias, path and parameters.\n   *\n   * @param {String} name the name of the domain\n   * @param {String} path optional path (without a leading slash)\n   * @param {Object} params optional query parameters\n   * @return {String} the URL for the given parameters\n   */\n  _getUrl: function(name, path, params) {\n    var url = this.DOMAIN_MAP[name];\n    if (path) {\n      if (path[0] === '/') {\n        path = path.substr(1);\n      }\n      url += path;\n    }\n    if (params) {\n      url += '?' + querystring.stringify(params);\n    }\n    return url;\n  },\n\n  /**\n   * Returns the Current URL, stripping it of known FB parameters that should\n   * not persist.\n   *\n   * @return {String} the current URL\n   */\n  _getCurrentUrl: function() {\n    if (this.request && this.request.headers.host) {\n      var site = {\n        protocol: this.request.connection.encrypted ? 'https:' : 'http:',\n        host: this.request.headers.host\n      };\n    } else {\n      throw new Error('No request host available');\n    }\n    \n    var url = URL.parse(this.request.url, true);\n\n    // drop known fb params\n    this.DROP_QUERY_PARAMS.forEach(function(key) {\n      delete url.query[key];\n    });\n\n    var currentUrl = site.protocol + '//' + site.host + url.pathname;\n    if (url.query) {\n      currentUrl += '?' + querystring.stringify(url.query);\n    }\n\n    return currentUrl;\n  },\n\n  /**\n   * Generate a signature for the given params and secret.\n   *\n   * @param {Object} params the parameters to sign\n   * @param {String} secret the secret to sign with\n   * @return {String} the generated signature\n   */\n  _generateSignature: function(params, secret) {\n    var md5 = crypto.createHash('md5');\n    Object.keys(params).sort().forEach(function(key) {\n      if (key !== 'sig') {\n        md5.update(key + '=' + params[key]);\n      }\n    });\n    md5.update(secret);\n    return md5.digest('hex');\n  },\n\n  /**\n   * Prints to the error log if you aren't in command line mode.\n   *\n   * @param {String} msg log message\n   */\n  _errorLog: function(msg) {\n    console.log(msg);\n  },\n\n  /**\n   * Base64 encoding that doesn't need to be urlencode()ed.\n   * Exactly the same as base64_encode except it uses\n   *   - instead of +\n   *   _ instead of /\n   *\n   * @param {String} input base64UrlEncodeded string\n   * @param {String} decoded\n   */\n  _base64UrlDecode: function(input) {\n    var buffer = new Buffer(input.replace('-', '+').replace('_', '/'), 'base64');\n    return buffer.toString('binary');\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}