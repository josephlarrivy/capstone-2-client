{"ast":null,"code":"import axios from 'axios';\nimport { recreation_api_key } from '../keys';\nclass RecreationGovAPI {\n  constructor() {\n    this.baseURL = \"https://ridb.recreation.gov/api/v1\";\n  }\n  async findParksForActivity(activity) {\n    // Construct the API endpoint for searching parks by activity\n    const endpoint = `${this.baseURL}/facilities?activity=${activity}&limit=50`;\n\n    // Send the API request and handle any errors\n    try {\n      const response = await fetch(endpoint);\n      if (!response.ok) {\n        throw new Error(`API request failed with status code ${response.status}`);\n      }\n      const data = await response.json();\n\n      // Extract the park names from the API response\n      const parks = data.RECDATA.map(facility => facility.FacilityName);\n      return parks;\n    } catch (error) {\n      console.error(`Error making API request: ${error.message}`);\n      return [];\n    }\n  }\n}\nexport default RecreationGovAPI;","map":{"version":3,"names":["axios","recreation_api_key","RecreationGovAPI","constructor","baseURL","findParksForActivity","activity","endpoint","response","fetch","ok","Error","status","data","json","parks","RECDATA","map","facility","FacilityName","error","console","message"],"sources":["/Users/josephlarrivy/software-engineering/springboard/assignments/capstone-2-rework/front-end/src/apis/RecreationGovAPI.js"],"sourcesContent":["import axios from 'axios';\n\nimport { recreation_api_key } from '../keys';\n\nclass RecreationGovAPI {\n  constructor() {\n    this.baseURL = \"https://ridb.recreation.gov/api/v1\";\n  }\n\n  async findParksForActivity(activity) {\n    // Construct the API endpoint for searching parks by activity\n    const endpoint = `${this.baseURL}/facilities?activity=${activity}&limit=50`;\n\n    // Send the API request and handle any errors\n    try {\n      const response = await fetch(endpoint);\n      if (!response.ok) {\n        throw new Error(`API request failed with status code ${response.status}`);\n      }\n      const data = await response.json();\n\n      // Extract the park names from the API response\n      const parks = data.RECDATA.map((facility) => facility.FacilityName);\n      return parks;\n    } catch (error) {\n      console.error(`Error making API request: ${error.message}`);\n      return [];\n    }\n  }\n}\n\nexport default RecreationGovAPI;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,kBAAkB,QAAQ,SAAS;AAE5C,MAAMC,gBAAgB,CAAC;EACrBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,OAAO,GAAG,oCAAoC;EACrD;EAEA,MAAMC,oBAAoBA,CAACC,QAAQ,EAAE;IACnC;IACA,MAAMC,QAAQ,GAAI,GAAE,IAAI,CAACH,OAAQ,wBAAuBE,QAAS,WAAU;;IAE3E;IACA,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,QAAQ,CAAC;MACtC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,uCAAsCH,QAAQ,CAACI,MAAO,EAAC,CAAC;MAC3E;MACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,EAAE;;MAElC;MACA,MAAMC,KAAK,GAAGF,IAAI,CAACG,OAAO,CAACC,GAAG,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,YAAY,CAAC;MACnE,OAAOJ,KAAK;IACd,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAE,6BAA4BA,KAAK,CAACE,OAAQ,EAAC,CAAC;MAC3D,OAAO,EAAE;IACX;EACF;AACF;AAEA,eAAepB,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}